{
	"info": {
		"_postman_id": "7161047c-2f02-4c03-a97e-48bf04edb6d6",
		"name": "Integration Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Login and Register Tests",
			"item": [
				{
					"name": "user login fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b42fb8fa-3ea3-4afe-ab5a-0e5c91a40409",
								"exec": [
									"pm.test(\"User should not login test\", function() {",
									"    pm.response.to.have.status(500);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userNameOrEmail\": \"Jonathan\",\r\n    \"password\": \"notSecure2\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/user/login",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "user login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "40b1c3f2-c4f9-4cf8-92b1-88f23289fb49",
								"exec": [
									"pm.test(\"User user should be able to login\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"Verifying the response of the user login\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.response.to.have.status(200);",
									"    pm.expect(responseJson.user.userName).to.eql('user');",
									"    pm.expect(responseJson.user.email).to.eql('user@example.com');",
									"    pm.expect(responseJson.user.firstName).to.eql('Testing');",
									"    pm.expect(responseJson.user.lastName).to.eql('user');",
									"    pm.expect(responseJson.user.isAdmin).to.eql(0);",
									"    pm.expect(responseJson.user.userId).to.eql(2);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userNameOrEmail\":\"user\",\r\n    \"password\":\"notSecure12\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/user/login",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "69809668-1d88-4fc9-ae53-9d43e4c78c2e",
								"exec": [
									"pm.test(\"User admin should be able to login\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"Verifying the response of the user admin login\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.response.to.have.status(200);",
									"    pm.expect(responseJson.user.userName).to.eql('admin');",
									"    pm.expect(responseJson.user.email).to.eql('admin@example.com');",
									"    pm.expect(responseJson.user.firstName).to.eql('Admin');",
									"    pm.expect(responseJson.user.isAdmin).to.eql(1);",
									"    pm.expect(responseJson.user.userId).to.eql(1);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userNameOrEmail\": \"admin\",\r\n    \"password\": \"notSecure12\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/user/login",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "user registration",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "455cbe53-469b-4f77-a5f3-cc6e64820812",
								"exec": [
									"pm.test(\"Registration should be possible\", () => {",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userName\":\"Testi\",\r\n    \"password\":\"notSecure12\",\r\n    \"email\":\"testi@example.com\",\r\n    \"lastName\":\"ng\",\r\n    \"firstName\":\"Testi\",\r\n    \"isAdmin\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/user/register",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"user",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "user registration same username",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a704d550-5379-4525-8ae9-70f9c102722a",
								"exec": [
									"pm.test(\"Guest should be unable to register with already used username\", () => {",
									"    pm.response.to.have.status(500);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userName\":\"Testi\",\r\n    \"password\":\"notSecure12\",\r\n    \"email\":\"testi2@example.com\",\r\n    \"lastName\":\"ng\",\r\n    \"firstName\":\"Testi\",\r\n    \"isAdmin\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/user/register",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"user",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "user registration same  email",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7639e2f2-65bb-4a82-adc3-2aaf474b205a",
								"exec": [
									"pm.test(\"Guest should be unable to register with already used email\", () => {",
									"    pm.response.to.have.status(500);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userName\":\"Testing\",\r\n    \"password\":\"notSecure12\",\r\n    \"email\":\"testi@example.com\",\r\n    \"lastName\":\"ng\",\r\n    \"firstName\":\"Testi\",\r\n    \"isAdmin\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/user/register",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"user",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "user registration forgotten fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1e78208e-3317-483a-9876-187ce5c3aa5f",
								"exec": [
									"pm.test(\"Guest should be unable to register if he forgot some attributes\", () => {",
									"    pm.response.to.have.status(500);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userName\":\"Testing\",\r\n    \"password\":\"notSecure12\",\r\n    \"email\":\"testi2@example.com\",\r\n    \"isAdmin\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/user/register",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"user",
								"register"
							]
						}
					},
					"response": []
				}
			],
			"description": "Integration tests that concerning the User controller in the backend\nNo token is used for these tests",
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "297ff27a-cda5-48bd-9fff-81c6ccc89053",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "c57cb601-17af-4a71-9d0e-1d384edbac92",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Notification Tests",
			"item": [
				{
					"name": "create Notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e2db8399-3286-4416-80c5-a9c8d1c0eb5c",
								"exec": [
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"All users should be able to create a review\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"Check the parameters of the notification\", () => {",
									"    pm.expect(responseJson.userId).to.eql(pm.environment.get('userId').toNumber());",
									"    pm.expect(responseJson.text).to.eql(\"This is a sample notificaiton\");",
									"    pm.expect(responseJson.read).to.eql(0);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"This is a sample notificaiton\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/notification",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"notification"
							]
						}
					},
					"response": []
				},
				{
					"name": "get notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8843242a-c0ef-4ed6-b93e-82acd07b4fc9",
								"exec": [
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"All users should be able to create a review\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"",
									"if (pm.environment.get('userId') == 1 ) {",
									"    pm.test(\"Check the parameters of the notification\", () => {",
									"        pm.expect(responseJson[0].userId).to.eql(pm.environment.get('userId').toNumber());",
									"        pm.expect(responseJson[0].text).to.eql(\"This is a sample notificaiton\");",
									"        pm.expect(responseJson[0].read).to.eql(0);",
									"    })",
									"} else if (pm.environment.get('userId') == 2 ) {",
									"    pm.test(\"Check the parameters of the notification\", () => {",
									"        pm.expect(responseJson[1].userId).to.eql(pm.environment.get('userId').toNumber());",
									"        pm.expect(responseJson[1].text).to.eql(\"This is a sample notificaiton\");",
									"        pm.expect(responseJson[1].read).to.eql(0);",
									"    })",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{uri}}/notification",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"notification"
							]
						}
					},
					"response": []
				},
				{
					"name": "read notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ece33a3a-a91f-4185-9c95-8fd0dddee4a4",
								"exec": [
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"All users should be able to create a review\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"if (pm.environment.get('userId') == 1 ) {",
									"    pm.test(\"Check the parameters of the notification\", () => {",
									"        pm.expect(responseJson.userId).to.eql(pm.environment.get('userId').toNumber());",
									"        pm.expect(responseJson.text).to.eql(\"This is a sample notificaiton\");",
									"        pm.expect(responseJson.read).to.eql(1);",
									"    })",
									"} else if (pm.environment.get('userId') == 2 ) {",
									"    pm.test(\"Check the parameters of the notification\", () => {",
									"        pm.expect(responseJson.userId).to.eql(pm.environment.get('userId').toNumber());",
									"        pm.expect(responseJson.read).to.eql(1);",
									"    })",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "http://{{uri}}/notification/{{notificationId}}",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"notification",
								"{{notificationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7b5449e5-693d-484c-8d68-8fcd4576e6c8",
								"exec": [
									"pm.test(\"All users should be able to create a review\", () => {",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{uri}}/notification/{{userId}}",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"notification",
								"{{userId}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Review Tests",
			"item": [
				{
					"name": "create a review",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "619839ae-994d-4fca-94ff-ae892698c09a",
								"exec": [
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"All users should be able to create a review\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"",
									"pm.test(\"Verify the new review attribute\",() => {",
									"    pm.expect(responseJson.review).to.eql('This is by far the best product eva');",
									"    pm.expect(responseJson.productId).to.eql(parseInt(pm.environment.get('productId')));",
									"    pm.expect(responseJson.userId).to.eql(parseInt(pm.environment.get('userId')));",
									"    pm.expect(responseJson.rating).to.eql(3);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"review\":\"This is by far the best product eva\",\r\n    \"productId\": {{productId}},\r\n    \"rating\": 3\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/review",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"review"
							]
						}
					},
					"response": []
				},
				{
					"name": "update a review",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "60d25529-d721-4311-8b45-4f5b694ae281",
								"exec": [
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"All users should be able to update their review\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"",
									"pm.test(\"Verify the new review attribute\",() => {",
									"    pm.expect(responseJson.review).to.eql('This is by far the best product eva');",
									"    pm.expect(responseJson.rating).to.eql(3);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"review\":\"This is by far the best product eva\",\r\n    \"productId\": {{productId}},\r\n    \"rating\": 3\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/review/{{ownReviewId}}",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"review",
								"{{ownReviewId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update a review with rating out of range",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d2380460-fd0f-4e59-ae55-d010da834c84",
								"exec": [
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"Update should fail\", () => {",
									"    pm.response.to.have.status(500);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"review\":\"This is by far the best product eva\",\r\n    \"productId\": {{productId}},\r\n    \"rating\": 1000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/review/{{ownReviewId}}",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"review",
								"{{ownReviewId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "user delete own review",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "547fc6ba-de01-403b-88db-22f4c685cb6f",
								"exec": [
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"User is able to delete own review\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/review/{{deleteOwnReviewId}}",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"review",
								"{{deleteOwnReviewId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "user delete other review",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6d4b2596-8193-4c50-8899-c1e965156c21",
								"exec": [
									"const responseJson = pm.response.json();",
									"",
									"if (pm.environment.get('userId') == 1 ) {",
									"    pm.test(\"Admin is able to delete other review\", () => {",
									"        pm.response.to.have.status(200);",
									"    })",
									"} else if (pm.environment.get('userId') == 2 ) {",
									"    pm.test(\"User is not able to delete other review\", () => {",
									"        pm.response.to.have.status(500);",
									"    })",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"review\":\"This is by far the best product eva\",\r\n    \"productId\": {{productId}},\r\n    \"rating\": 3\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/review/{{deleteOtherReviewId}}",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"review",
								"{{deleteOtherReviewId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create a review rating out of range",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9611b12f-ea44-42e6-8812-7420ee288442",
								"exec": [
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"Cannot create a review with a rating out of range\",() => {",
									"    pm.response.to.have.status(500);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"review\":\"This is by far the best product eva\",\r\n    \"productId\": {{productId}},\r\n    \"rating\": 1000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/review",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"review"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "ShoppingCart Tests",
			"item": [
				{
					"name": "empty Shopping Cart error",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ae355efb-f365-4721-82e0-d18a8900a157",
								"exec": [
									"pm.test(\"User should be able to buy its shopping cart\",() => {",
									"    pm.response.to.have.status(500);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"city\":\"test city\",\n    \"country\": \"Test Country\",\n    \"zipCode\": \"1234\",\n    \"street\": \"test Street 1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/cart/buy",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"cart",
								"buy"
							]
						}
					},
					"response": []
				},
				{
					"name": "create ShoppingCart entry",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4a606e3c-d47d-4316-a7ea-6987207ce8f2",
								"exec": [
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"User should be able to add items to its shopping cart\",() => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"Check the response attributes\", () => {",
									"    pm.expect(responseJson.buyerId).to.eql(pm.environment.get('userId').toNumber());",
									"    pm.expect(responseJson.buyerId).to.be.an('number');",
									"    pm.expect(responseJson.productId).to.eql(2);",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c88fcc85-535f-4941-82cc-4298f4677ac7",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amountOrTime\": 4\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/cart/2",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"cart",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add same product = update amountOrTime",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "02c2cdbf-9832-4346-8835-5a0191f7d96e",
								"exec": [
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"User should be able to add items to its shopping cart\",() => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"Check the response attributes\", () => {",
									"    pm.expect(responseJson.buyerId).to.eql(pm.environment.get('userId').toNumber());",
									"    pm.expect(responseJson.buyerId).to.be.an('number');",
									"    pm.expect(responseJson.productId).to.eql(2);",
									"    pm.expect(responseJson.amountOrTime).to.be.eql(8);",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "17423062-dc8c-482a-9848-5fe118a73eb5",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amountOrTime\": 4\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/cart/2",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"cart",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "get ShoppingCart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "265c0174-f3f2-46e7-8dec-f13b5a3e07dd",
								"exec": [
									"pm.test(\"User should be able to add items to its shopping cart\",() => {",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amountOrTime\": 2\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/cart/",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"cart",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "update ShoppingCart entry",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8b9140eb-7fbc-40c0-be7d-0ac815a2dcf6",
								"exec": [
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"User should be able to add items to its shopping cart\",() => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"Check the response attributes\", () => {",
									"    pm.expect(responseJson.buyerId).to.eql(pm.environment.get('userId').toNumber());",
									"    pm.expect(responseJson.buyerId).to.be.an('number');",
									"    pm.expect(responseJson.productId).to.eql(2);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amountOrTime\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/cart/2",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"cart",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete ShoppingCart entry",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "58358432-bd19-42ea-8794-79e439a021d4",
								"exec": [
									"pm.test(\"User should be able to add items to its shopping cart\",() => {",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{uri}}/cart/2",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"cart",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "create ShoppingCart with wrong productId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c409683a-ac3a-4d89-bf98-f87ee882ecbc",
								"exec": [
									"pm.test(\"Return error if the product is not found\",() => {",
									"    pm.response.to.have.status(500);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amountOrTime\": 4\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/cart/100",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"cart",
								"100"
							]
						}
					},
					"response": []
				},
				{
					"name": "create ShoppingCart with unapproved product",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c58e27dc-ce93-4a58-bce3-c48a41d02deb",
								"exec": [
									"pm.test(\"Return error if the product is not approved\",() => {",
									"    pm.response.to.have.status(500);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amountOrTime\": 4\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/cart/1",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"cart",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "successfull buy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "546827da-50c6-4573-af1d-2e6103353ba0",
								"exec": [
									"if (pm.environment.get('userId') == 1 ) {",
									"    pm.test(\"Admin should be able to buy its shopping cart\",() => {",
									"        pm.response.to.have.status(200);",
									"    })",
									"} else {",
									"    pm.test(\"User won't have enough credits\", () => {",
									"        pm.response.to.have.status(500);",
									"    })",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "76193268-3318-4c88-bb7f-13cbd2860de4",
								"exec": [
									"const echoPostRequest = {",
									"  url: 'http://' + pm.collectionVariables.get('uri') + '/cart/2',",
									"  method: 'POST',",
									"  header: {",
									"      'Content-Type': 'application/json',",
									"      'Authorization': 'Bearer ' + pm.environment.get('currentAccessToken')",
									"    },",
									"  body: {",
									"    mode: 'application/json',",
									"    raw: JSON.stringify(",
									"        {",
									"            amountOrTime: pm.environment.get('deleteUserId2')",
									"        })",
									"  }",
									"};",
									"",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"    console.log(err ? err : res.json());",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"city\":\"test city\",\n    \"country\": \"Test Country\",\n    \"zipCode\": \"1234\",\n    \"street\": \"test Street 1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/cart/buy",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"cart",
								"buy"
							]
						}
					},
					"response": []
				}
			],
			"description": "Test the transactions",
			"protocolProfileBehavior": {}
		},
		{
			"name": "Wishlist Tests",
			"item": [
				{
					"name": "create Wishlist entry",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ba2dfcf0-7f0c-4619-ae59-fc99a43dca4e",
								"exec": [
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"User should be able to add items to its shopping cart\",() => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"Check the response attributes\", () => {",
									"    pm.expect(responseJson.buyerId).to.eql(pm.environment.get('userId').toNumber());",
									"    pm.expect(responseJson.buyerId).to.be.an('number');",
									"    pm.expect(responseJson.productId).to.eql(2);",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6dfe43e6-19bb-474b-a887-799471d6d0f0",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amountOrTime\": 4\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/wishlist/2",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"wishlist",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "get Wishlist",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0f95cd6b-c8a1-4d43-a915-a64acb743b24",
								"exec": [
									"pm.test(\"User should be able to add items to its shopping cart\",() => {",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amountOrTime\": 2\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/wishlist/",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"wishlist",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "delete Wishlist entry",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9bc5034d-ea32-432b-a412-972e14308a4b",
								"exec": [
									"pm.test(\"User should be able to add items to its shopping cart\",() => {",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{uri}}/wishlist/2",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"wishlist",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "create Wishlist with wrong productId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7f3ca812-c36c-4c0c-bdc1-2a912cb12568",
								"exec": [
									"pm.test(\"Return error if the product is not found\",() => {",
									"    pm.response.to.have.status(500);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amountOrTime\": 4\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/wishlist/100",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"wishlist",
								"100"
							]
						}
					},
					"response": []
				},
				{
					"name": "create Wishlist with unapproved product",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ca47f503-136f-47cc-a4e4-d0f0393cf227",
								"exec": [
									"pm.test(\"Return error if the product is not approved\",() => {",
									"    pm.response.to.have.status(500);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amountOrTime\": 4\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/wishlist/1",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"wishlist",
								"1"
							]
						}
					},
					"response": []
				}
			],
			"description": "Test the transactions",
			"protocolProfileBehavior": {}
		},
		{
			"name": "Product Tests",
			"item": [
				{
					"name": "create Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d0a28c47-fbc8-4806-8568-af43ea6e6077",
								"exec": [
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"All users should be able to create new products\",() => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"The new product should have the same userId as the creator\",() => {",
									"    pm.expect(responseJson.userId).to.eql(parseInt(pm.environment.get('userId')));",
									"})",
									"",
									"pm.test(\"New products should not be approved\",() => {",
									"    pm.expect(responseJson.approved).to.eql(0);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"TestProdu21ct\",\n    \"type\": 0,\n    \"description\": \"This is a test product\",\n    \"location\": \"Bern\",\n    \"sellOrLend\": 0,\n    \"price\": 120,\n    \"priceKind\": 0,\n    \"status\": 0,\n    \"deliverable\": 1,\n    \"approved\": 0,\n    \"userId\": {{userId}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/products",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "create Product Guest",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8d65ef23-6e79-4e82-bb49-6e4e0504d90a",
								"exec": [
									"pm.test(\"Guests should not be able to create a product\",() => {",
									"    pm.response.to.have.status(403);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"TestProdu21ct\",\n    \"type\": 0,\n    \"description\": \"This is a test product\",\n    \"location\": \"Bern\",\n    \"sellOrLend\": 0,\n    \"price\": 120,\n    \"priceKind\": 0,\n    \"status\": 0,\n    \"deliverable\": 1,\n    \"approved\": 0,\n    \"userId\": {{userId}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/products",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "update own product",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "491d70c3-84d8-4c4e-9e1b-2b1f25d868aa",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7b5f187d-4a56-4dd3-ac41-c6ba26bad53e",
								"exec": [
									"pm.test(\"All users are able to update their product\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"Verify the updated attributes\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.title).to.eql('updatedTitle');",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"updatedTitle\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/products/{{productId}}",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"products",
								"{{productId}}"
							]
						},
						"description": "delete a product"
					},
					"response": []
				},
				{
					"name": "update other users product",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ac46c128-4eba-4500-950b-79c123774d5a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c65d4769-c321-4f3a-b6a0-9fca559702e7",
								"exec": [
									"if (pm.environment.get('userId') == 1 ) {",
									"    pm.test(\"Admin is able to update other users products\", () => {",
									"        pm.response.to.have.status(200);",
									"        const responseJson = pm.response.json();",
									"        pm.expect(responseJson.title).to.eql('updatedTitle2');",
									"    })",
									"} else if (pm.environment.get('userId') == 2 ) {",
									"    pm.test(\"User must not be able to update other users products\", () => {",
									"        pm.response.to.have.status(500);",
									"    })",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"updatedTitle2\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/products/{{productId2}}",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"products",
								"{{productId2}}"
							]
						},
						"description": "delete a product"
					},
					"response": []
				},
				{
					"name": "approve product",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "99582e26-cdc1-4dde-9734-c45eb0b08d7d",
								"exec": [
									"const echoPostRequest = {",
									"  url: 'http://' + pm.collectionVariables.get('uri') + '/products',",
									"  method: 'POST',",
									"  header: 'Content-Type:application/json',",
									"  body: {",
									"    mode: 'application/json',",
									"    raw: JSON.stringify(",
									"        {",
									"            title: \"TestProdu21ct\",",
									"            type: 0,",
									"            description: \"This is a test product\",",
									"            location: \"Bern\",",
									"            sellOrLend: 0,",
									"            price: 120,",
									"            priceKind: 0,",
									"            status: 0,",
									"            deliverable: 1,",
									"            approved: 0,",
									"            userId: pm.environment.get('userId')",
									"        })",
									"  }",
									"};",
									"",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"    console.log(err ? err : res.json());",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9c6f8cee-0913-4942-95de-bcded7fd35eb",
								"exec": [
									"if (pm.environment.get('userId') == 1 ) {",
									"    pm.test(\"Admin is able to approve the product\", () => {",
									"        pm.response.to.have.status(200);",
									"    })",
									"} else if (pm.environment.get('userId') == 2 ) {",
									"    pm.test(\"User must not be able to approve a product\", () => {",
									"        pm.response.to.have.status(500);",
									"    })",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"approved\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/products/{{productId}}",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"products",
								"{{productId}}"
							]
						},
						"description": "delete a product"
					},
					"response": []
				},
				{
					"name": "get User products",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f305c459-e072-45b2-a9a0-c7cc18a12523",
								"exec": [
									"pm.test(\"All users should be able to get their own products. Nethertheless if approved or not\",() => {",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{uri}}/products/",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"products",
								""
							]
						},
						"description": "Request all products from the database (from all users)\nonly a logged in person should be able to do this"
					},
					"response": []
				},
				{
					"name": "get catalog",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "578e87e5-0d52-4723-a6f9-4bc477b8c4a6",
								"exec": [
									"pm.test(\"Everyone should be able to get the catalog\", () => {",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{uri}}/products/catalog",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"products",
								"catalog"
							]
						},
						"description": "Request all products from the database (from all users)\nonly a logged in person should be able to do this"
					},
					"response": []
				},
				{
					"name": "get catalog Guest",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a13a17c1-d427-4c32-ad18-284f6cdd8160",
								"exec": [
									"pm.test(\"Everyone should be able to get the catalog\", () => {",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{uri}}/products/catalog",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"products",
								"catalog"
							]
						},
						"description": "Request all products from the database (from all users)\nonly a logged in person should be able to do this"
					},
					"response": []
				},
				{
					"name": "get all unapproved products",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e5ac9bd2-08fc-4d32-8a17-be47a7acdbbe",
								"exec": [
									"if (pm.environment.get('userId') == 1 ) {",
									"    pm.test(\"Admin is able to get all the unapproved products\", () => {",
									"        pm.response.to.have.status(200);",
									"    })",
									"} else if (pm.environment.get('userId') == 2 ) {",
									"    pm.test(\"User must not be able to get all the unapproved products\", () => {",
									"        pm.response.to.have.status(500);",
									"    })",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{uri}}/products/admin-catalog",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"products",
								"admin-catalog"
							]
						},
						"description": "Request all products from the database (from all users)\nonly a logged in person should be able to do this"
					},
					"response": []
				},
				{
					"name": "delete own product",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "08097576-984e-486b-8489-7582672f203a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "184fa8e2-d8c6-4688-8a36-d46b0c2174e3",
								"exec": [
									"pm.test(\"All users are able to delete their product\", () => {",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{uri}}/products/{{productId}}",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"products",
								"{{productId}}"
							]
						},
						"description": "delete a product"
					},
					"response": []
				},
				{
					"name": "delete other users product",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "dc78fd98-41d4-45ab-bc11-5d2001e58e8f",
								"exec": [
									"const echoPostRequest = {",
									"  url: 'http://' + pm.collectionVariables.get('uri') + '/products',",
									"  method: 'POST',",
									"  header: {",
									"      'Content-Type': 'application/json',",
									"      'Authorization': 'Bearer ' + pm.environment.get('currentAccessToken')",
									"  },",
									"  body: {",
									"    mode: 'application/json',",
									"    raw: JSON.stringify(",
									"        {",
									"            title: \"TestProdu21ct\",",
									"            type: 0,",
									"            description: \"This is a test product\",",
									"            location: \"Bern\",",
									"            sellOrLend: 0,",
									"            price: 120,",
									"            priceKind: 0,",
									"            status: 0,",
									"            deliverable: 1,",
									"            approved: 0,",
									"            userId: 2",
									"        })",
									"  }",
									"};",
									"",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"    console.log(err ? err : res.json());",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b69f0692-8268-456a-a4ea-24726a6dfe8e",
								"exec": [
									"if (pm.environment.get('userId') == 1 ) {",
									"    pm.test(\"Admin is able to delete other users products\", () => {",
									"        pm.response.to.have.status(200);",
									"    })",
									"} else if (pm.environment.get('userId') == 2 ) {",
									"    pm.test(\"User must not be able to delete other users products\", () => {",
									"        pm.response.to.have.status(500);",
									"    })",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{uri}}/products/{{productId2}}",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"products",
								"{{productId2}}"
							]
						},
						"description": "delete a product"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "User Tests",
			"item": [
				{
					"name": "get user information",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a193ba2c-30f1-4f20-a2a1-4338c63f13e6",
								"exec": [
									"pm.test(\"Every user should be able to get his account information\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"if (pm.environment.get('userId') == 1 ) {",
									"    pm.test(\"Verifying the response of admin account information\", () => {",
									"        const responseJson = pm.response.json();",
									"        pm.response.to.have.status(200);",
									"        pm.expect(responseJson.userName).to.eql('admin');",
									"        pm.expect(responseJson.email).to.eql('admin@example.com');",
									"        pm.expect(responseJson.firstName).to.eql('Admin');",
									"        pm.expect(responseJson.lastName).to.eql('istrator');",
									"        pm.expect(responseJson.isAdmin).to.eql(1);",
									"        pm.expect(responseJson.userId).to.eql(1);",
									"    })",
									"} else if (pm.environment.get('userId') == 2 ) {",
									"    pm.test(\"Verifying the response of user account information\", () => {",
									"        const responseJson = pm.response.json();",
									"        pm.response.to.have.status(200);",
									"        pm.expect(responseJson.userName).to.eql('user');",
									"        pm.expect(responseJson.email).to.eql('user@example.com');",
									"        pm.expect(responseJson.firstName).to.eql('Testing');",
									"        pm.expect(responseJson.lastName).to.eql('user');",
									"        pm.expect(responseJson.isAdmin).to.eql(0);",
									"        pm.expect(responseJson.userId).to.eql(2);",
									"    })",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{uri}}/user/",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"user",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "get all users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f14575f5-3f9a-49b9-a9ac-def535070007",
								"exec": [
									"if (pm.environment.get('userId') == 1 ) {",
									"    pm.test(\"Admin is able to get all the user information\", () => {",
									"        pm.response.to.have.status(200);",
									"    })",
									"} else if (pm.environment.get('userId') == 2 ) {",
									"    pm.test(\"User must not be able to get all users of system\", () => {",
									"        pm.response.to.have.status(500);",
									"    })",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{uri}}/user/all",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"user",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "update User info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a50d01db-29a8-4cf2-8d90-e23af5941617",
								"exec": [
									"pm.test(\"All users should be able to update their account information\", () => {",
									"    pm.response.to.have.status(200);",
									"",
									"})",
									"pm.test(\"Verify the updated attributes\", () => {",
									"    pm.response.to.have.status(200);",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.lastName).to.eql('updated lastName');",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"lastName\": \"updated lastName\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/user/update",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"user",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "user delete",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f23c68ba-8428-476c-8dc3-148950c5fd9f",
								"exec": [
									"const echoPostRequest = {",
									"  url: 'http://' + pm.collectionVariables.get('uri') + '/user/register',",
									"  method: 'POST',",
									"  header: 'Content-Type:application/json',",
									"  body: {",
									"    mode: 'application/json',",
									"    raw: JSON.stringify(",
									"        {",
									"            userName: \"testi\" + pm.environment.get('deleteUserId'),",
									"            password: \"notSecure12\",",
									"            email: \"testi2@example.com\",",
									"            lastName: \"ng\",",
									"            firstName: \"Testi\",",
									"            isAdmin: 1",
									"        })",
									"  }",
									"};",
									"",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"    console.log(err ? err : res.json());",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8eb7d74f-8975-48d4-9aac-dc0ecf771f2c",
								"exec": [
									"if (pm.environment.get('userId') == 1 ) {",
									"    pm.test(\"Admin is able to get delete User with userId: \" + pm.environment.get('deleteUserId'), () => {",
									"        pm.response.to.have.status(200);",
									"    })",
									"} else if (pm.environment.get('userId') == 2 ) {",
									"    pm.test(\"User is able to delete own account\", () => {",
									"        pm.response.to.have.status(200);",
									"    })",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{uri}}/user/{{deleteUserId}}",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"user",
								"{{deleteUserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "user delete 2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f6a5f9e1-13ab-49fe-a8b3-aa26f38d60f4",
								"exec": [
									"const echoPostRequest = {",
									"  url: 'http://' + pm.collectionVariables.get('uri') + '/user/register',",
									"  method: 'POST',",
									"  header: 'Content-Type:application/json',",
									"  body: {",
									"    mode: 'application/json',",
									"    raw: JSON.stringify(",
									"        {",
									"            userName: \"testi\" + pm.environment.get('deleteUserId2'),",
									"            password: \"notSecure12\",",
									"            email: \"testi3@example.com\",",
									"            lastName: \"ng\",",
									"            firstName: \"Testi\",",
									"            isAdmin: 1",
									"        })",
									"  }",
									"};",
									"",
									"const echoPostRequest2 = {",
									"  url: 'http://' + pm.collectionVariables.get('uri') + '/user/register',",
									"  method: 'POST',",
									"  header: 'Content-Type:application/json',",
									"  body: {",
									"    mode: 'application/json',",
									"    raw: JSON.stringify(",
									"        {",
									"            userName: \"testi4\",",
									"            password: \"notSecure12\",",
									"            email: \"testi4@example.com\",",
									"            lastName: \"ng\",",
									"            firstName: \"Testi\",",
									"            isAdmin: 1",
									"        })",
									"  }",
									"};",
									"",
									"const echoPostRequest3 = {",
									"  url: 'http://' + pm.collectionVariables.get('uri') + '/user/register',",
									"  method: 'POST',",
									"  header: 'Content-Type:application/json',",
									"  body: {",
									"    mode: 'application/json',",
									"    raw: JSON.stringify(",
									"        {",
									"            userName: \"testi5\",",
									"            password: \"notSecure12\",",
									"            email: \"testi5@example.com\",",
									"            lastName: \"ng\",",
									"            firstName: \"Testi\",",
									"            isAdmin: 1",
									"        })",
									"  }",
									"};",
									"",
									"pm.sendRequest(echoPostRequest3, function (err, res) {",
									"    console.log(err ? err : res.json());",
									"});",
									"",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"    console.log(err ? err : res.json());",
									"});",
									"",
									"pm.sendRequest(echoPostRequest2, function (err, res) {",
									"    console.log(err ? err : res.json());",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e2ac47ef-13b6-4c6a-9faa-7d34b182d2eb",
								"exec": [
									"if (pm.environment.get('userId') == 1 ) {",
									"    pm.test(\"Admin is able to get delete User with userId: \" + pm.environment.get('deleteUserId2'), () => {",
									"        pm.response.to.have.status(200);",
									"    })",
									"} else if (pm.environment.get('userId') == 2 ) {",
									"    pm.test(\"User must not be able to delete other account\", () => {",
									"        pm.response.to.have.status(403);",
									"    })",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{uri}}/user/{{deleteUserId2}}",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"user",
								"{{deleteUserId2}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{currentAccessToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "5e7a816b-004c-4382-8990-702313d2cd42",
				"type": "text/javascript",
				"exec": [
					"const echoPostRequest = {",
					"  url: 'http://' + pm.collectionVariables.get('uri') + '/user/login',",
					"  method: 'POST',",
					"  header: 'Content-Type:application/json',",
					"  body: {",
					"    mode: 'application/json',",
					"    raw: JSON.stringify(",
					"        {",
					"        \tuserNameOrEmail: pm.environment.get('username'),",
					"        \tpassword: pm.environment.get('password')",
					"        })",
					"  }",
					"};",
					"",
					"pm.sendRequest(echoPostRequest, function (err, res) {",
					"    console.log(err ? err : res.json());",
					"    if (err === null) {",
					"        console.log('Saving the token and expiry date')",
					"        var responseJson = res.json();",
					"        pm.environment.set('currentAccessToken', responseJson.token)",
					"    }",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "855e1a68-74e8-4fd7-b720-46544779da98",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "550648f1-2c33-4f63-b4c3-5106dae46140",
			"key": "currentAccessToken",
			"value": ""
		},
		{
			"id": "f56461aa-10fa-49e5-904d-852af87e0a2c",
			"key": "uri",
			"value": "localhost:3000"
		}
	],
	"protocolProfileBehavior": {}
}