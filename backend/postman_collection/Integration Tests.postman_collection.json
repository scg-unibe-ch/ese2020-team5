{
	"info": {
		"_postman_id": "6a3f1ef1-b342-4188-adb5-187b1a264cbc",
		"name": "Integration Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Login and Register Tests",
			"item": [
				{
					"name": "user login fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0fe827d1-21ca-4fc2-a264-a391c28f3a55",
								"exec": [
									"pm.test(\"User should not login test\", function() {",
									"    pm.response.to.have.status(500);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userNameOrEmail\": \"Jonathan\",\r\n    \"password\": \"notSecure2\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/user/login",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "user login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f54e58ce-6b22-4ec2-b2af-50fef4c53527",
								"exec": [
									"pm.test(\"User user should be able to login\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"Verifying the response of the user login\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.response.to.have.status(200);",
									"    pm.expect(responseJson.user.userName).to.eql('user');",
									"    pm.expect(responseJson.user.email).to.eql('user@example.com');",
									"    pm.expect(responseJson.user.firstName).to.eql('Testing');",
									"    pm.expect(responseJson.user.lastName).to.eql('user');",
									"    pm.expect(responseJson.user.isAdmin).to.eql(0);",
									"    pm.expect(responseJson.user.userId).to.eql(2);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userNameOrEmail\":\"user\",\r\n    \"password\":\"notSecure12\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/user/login",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ce7d5c5b-188f-4e5f-b138-810bdd26b1a4",
								"exec": [
									"pm.test(\"User admin should be able to login\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"Verifying the response of the user admin login\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.response.to.have.status(200);",
									"    pm.expect(responseJson.user.userName).to.eql('admin');",
									"    pm.expect(responseJson.user.email).to.eql('admin@example.com');",
									"    pm.expect(responseJson.user.firstName).to.eql('Admin');",
									"    pm.expect(responseJson.user.isAdmin).to.eql(1);",
									"    pm.expect(responseJson.user.userId).to.eql(1);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userNameOrEmail\": \"admin\",\r\n    \"password\": \"notSecure12\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/user/login",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "user registration",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0fed158e-2985-4bfb-8777-77b755e1469d",
								"exec": [
									"pm.test(\"Registration should be possible\", () => {",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userName\":\"Testi\",\r\n    \"password\":\"notSecure12\",\r\n    \"email\":\"testi@example.com\",\r\n    \"lastName\":\"ng\",\r\n    \"firstName\":\"Testi\",\r\n    \"isAdmin\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/user/register",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"user",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "user registration same username",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e8d33816-5bc0-40a7-ae65-adcf871ab95d",
								"exec": [
									"pm.test(\"Guest should be unable to register with already used username\", () => {",
									"    pm.response.to.have.status(500);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userName\":\"Testi\",\r\n    \"password\":\"notSecure12\",\r\n    \"email\":\"testi2@example.com\",\r\n    \"lastName\":\"ng\",\r\n    \"firstName\":\"Testi\",\r\n    \"isAdmin\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/user/register",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"user",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "user registration same  email",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "95b30ad5-ce5c-4c21-ae21-4954ade0b475",
								"exec": [
									"pm.test(\"Guest should be unable to register with already used email\", () => {",
									"    pm.response.to.have.status(500);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userName\":\"Testing\",\r\n    \"password\":\"notSecure12\",\r\n    \"email\":\"testi@example.com\",\r\n    \"lastName\":\"ng\",\r\n    \"firstName\":\"Testi\",\r\n    \"isAdmin\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/user/register",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"user",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "user registration forgotten fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ac66655b-e21a-4ddd-9516-fc0b57a3429f",
								"exec": [
									"pm.test(\"Guest should be unable to register if he forgot some attributes\", () => {",
									"    pm.response.to.have.status(500);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userName\":\"Testing\",\r\n    \"password\":\"notSecure12\",\r\n    \"email\":\"testi2@example.com\",\r\n    \"isAdmin\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/user/register",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"user",
								"register"
							]
						}
					},
					"response": []
				}
			],
			"description": "Integration tests that concerning the User controller in the backend\nNo token is used for these tests",
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "540f2f8b-e582-46b1-8eda-129427c61139",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "5664f369-a366-46ec-9a5b-a09214aed321",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Review Tests",
			"item": [
				{
					"name": "create a review",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2fa6d1d3-7d2e-4864-8cc5-211b48cfac93",
								"exec": [
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"All users should be able to create a review\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"",
									"pm.test(\"Verify the new review attribute\",() => {",
									"    pm.expect(responseJson.review).to.eql('This is by far the best product eva');",
									"    pm.expect(responseJson.productId).to.eql(parseInt(pm.environment.get('productId')));",
									"    pm.expect(responseJson.userId).to.eql(parseInt(pm.environment.get('userId')));",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"review\":\"This is by far the best product eva\",\r\n    \"productId\": {{productId}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/review",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"review"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "ShoppingCart Tests",
			"item": [
				{
					"name": "empty Shopping Cart error",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "af41a012-19ca-4277-a758-42810324182f",
								"exec": [
									"pm.test(\"User should be able to buy its shopping cart\",() => {",
									"    pm.response.to.have.status(500);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://{{uri}}/cart/buy",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"cart",
								"buy"
							]
						}
					},
					"response": []
				},
				{
					"name": "create ShoppingCart entry",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "37ae8223-b644-4a12-ab53-4b9db2450f42",
								"exec": [
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"User should be able to add items to its shopping cart\",() => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"Check the response attributes\", () => {",
									"    pm.expect(responseJson.buyerId).to.eql(pm.environment.get('userId').toNumber());",
									"    pm.expect(responseJson.buyerId).to.be.an('number');",
									"    pm.expect(responseJson.productId).to.eql(2);",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "40de0cf4-72db-4ae5-9916-bfe26fe0aeb3",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amountOrTime\": 4\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/cart/2",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"cart",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add same product = update amountOrTime",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2f66ac05-587c-46fb-9edc-2bcd3b75878d",
								"exec": [
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"User should be able to add items to its shopping cart\",() => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"Check the response attributes\", () => {",
									"    pm.expect(responseJson.buyerId).to.eql(pm.environment.get('userId').toNumber());",
									"    pm.expect(responseJson.buyerId).to.be.an('number');",
									"    pm.expect(responseJson.productId).to.eql(2);",
									"    pm.expect(responseJson.amountOrTime).to.be.eql(8);",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b2b5c8c6-e708-41ba-a43d-3fe9e109fdf7",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amountOrTime\": 4\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/cart/2",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"cart",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "get ShoppingCart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ad503b24-58f9-47a2-84fc-a1a1b003c466",
								"exec": [
									"pm.test(\"User should be able to add items to its shopping cart\",() => {",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amountOrTime\": 2\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/cart/",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"cart",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "update ShoppingCart entry",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ceb3f0a7-984b-433a-ba0b-8c15707a443a",
								"exec": [
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"User should be able to add items to its shopping cart\",() => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"Check the response attributes\", () => {",
									"    pm.expect(responseJson.buyerId).to.eql(pm.environment.get('userId').toNumber());",
									"    pm.expect(responseJson.buyerId).to.be.an('number');",
									"    pm.expect(responseJson.productId).to.eql(2);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amountOrTime\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/cart/2",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"cart",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete ShoppingCart entry",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0c1b726d-d93f-4a9b-94b1-30c049d533e9",
								"exec": [
									"pm.test(\"User should be able to add items to its shopping cart\",() => {",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{uri}}/cart/2",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"cart",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "create ShoppingCart with wrong productId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b29fd0c1-877a-45bf-b30d-3dfdedcfe14b",
								"exec": [
									"pm.test(\"Return error if the product is not found\",() => {",
									"    pm.response.to.have.status(500);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amountOrTime\": 4\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/cart/100",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"cart",
								"100"
							]
						}
					},
					"response": []
				},
				{
					"name": "create ShoppingCart with unapproved product",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "68b227b2-a10f-47c7-8438-066366646d96",
								"exec": [
									"pm.test(\"Return error if the product is not approved\",() => {",
									"    pm.response.to.have.status(500);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amountOrTime\": 4\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/cart/1",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"cart",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "successfull buy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e9f30960-d1af-4b05-beb2-13943996b1ce",
								"exec": [
									"if (pm.environment.get('userId') == 1 ) {",
									"    pm.test(\"Admin should be able to buy its shopping cart\",() => {",
									"        pm.response.to.have.status(200);",
									"    })",
									"} else {",
									"    pm.test(\"User won't have enough credits\", () => {",
									"        pm.response.to.have.status(500);",
									"    })",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ddade65e-c56e-4f73-9539-e81506a143f7",
								"exec": [
									"const echoPostRequest = {",
									"  url: 'http://' + pm.collectionVariables.get('uri') + '/cart/2',",
									"  method: 'POST',",
									"  header: {",
									"      'Content-Type': 'application/json',",
									"      'Authorization': 'Bearer ' + pm.environment.get('currentAccessToken')",
									"    },",
									"  body: {",
									"    mode: 'application/json',",
									"    raw: JSON.stringify(",
									"        {",
									"            amountOrTime: pm.environment.get('deleteUserId2')",
									"        })",
									"  }",
									"};",
									"",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"    console.log(err ? err : res.json());",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://{{uri}}/cart/buy",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"cart",
								"buy"
							]
						}
					},
					"response": []
				}
			],
			"description": "Test the transactions",
			"protocolProfileBehavior": {}
		},
		{
			"name": "Product Tests",
			"item": [
				{
					"name": "create Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "52bec8bf-b18a-46cd-8dfa-f372d6b1a164",
								"exec": [
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"All users should be able to create new products\",() => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"The new product should have the same userId as the creator\",() => {",
									"    pm.expect(responseJson.userId).to.eql(parseInt(pm.environment.get('userId')));",
									"})",
									"",
									"pm.test(\"New products should not be approved\",() => {",
									"    pm.expect(responseJson.approved).to.eql(0);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"TestProdu21ct\",\n    \"type\": 0,\n    \"description\": \"This is a test product\",\n    \"location\": \"Bern\",\n    \"sellOrLend\": 0,\n    \"price\": 120,\n    \"priceKind\": 0,\n    \"status\": 0,\n    \"deliverable\": 1,\n    \"approved\": 0,\n    \"userId\": {{userId}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/products",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "create Product Guest",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e9a53c0-31b3-4885-9f9a-bbf2173a5fd8",
								"exec": [
									"pm.test(\"Guests should not be able to create a product\",() => {",
									"    pm.response.to.have.status(403);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"TestProdu21ct\",\n    \"type\": 0,\n    \"description\": \"This is a test product\",\n    \"location\": \"Bern\",\n    \"sellOrLend\": 0,\n    \"price\": 120,\n    \"priceKind\": 0,\n    \"status\": 0,\n    \"deliverable\": 1,\n    \"approved\": 0,\n    \"userId\": {{userId}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/products",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "update own product",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ac481b41-8ede-417c-ad09-e1d83f7db8dd",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e99b82a2-fbe3-45ed-a8ed-6f0791a63c6f",
								"exec": [
									"pm.test(\"All users are able to update their product\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"Verify the updated attributes\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.title).to.eql('updatedTitle');",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"updatedTitle\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/products/{{productId}}",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"products",
								"{{productId}}"
							]
						},
						"description": "delete a product"
					},
					"response": []
				},
				{
					"name": "update other users product",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "437f8b44-b61f-4188-9abd-6e325e31ea1e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "aa893607-0a26-4329-80eb-8beb08261461",
								"exec": [
									"if (pm.environment.get('userId') == 1 ) {",
									"    pm.test(\"Admin is able to update other users products\", () => {",
									"        pm.response.to.have.status(200);",
									"        const responseJson = pm.response.json();",
									"        pm.expect(responseJson.title).to.eql('updatedTitle2');",
									"    })",
									"} else if (pm.environment.get('userId') == 2 ) {",
									"    pm.test(\"User must not be able to update other users products\", () => {",
									"        pm.response.to.have.status(500);",
									"    })",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"updatedTitle2\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/products/{{productId2}}",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"products",
								"{{productId2}}"
							]
						},
						"description": "delete a product"
					},
					"response": []
				},
				{
					"name": "approve product",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2a76f671-b1db-4c63-bac5-f61cec8d230a",
								"exec": [
									"const echoPostRequest = {",
									"  url: 'http://' + pm.collectionVariables.get('uri') + '/products',",
									"  method: 'POST',",
									"  header: 'Content-Type:application/json',",
									"  body: {",
									"    mode: 'application/json',",
									"    raw: JSON.stringify(",
									"        {",
									"            title: \"TestProdu21ct\",",
									"            type: 0,",
									"            description: \"This is a test product\",",
									"            location: \"Bern\",",
									"            sellOrLend: 0,",
									"            price: 120,",
									"            priceKind: 0,",
									"            status: 0,",
									"            deliverable: 1,",
									"            approved: 0,",
									"            userId: pm.environment.get('userId')",
									"        })",
									"  }",
									"};",
									"",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"    console.log(err ? err : res.json());",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4dc45803-15a8-4b36-80fc-56cb5a9b00d9",
								"exec": [
									"if (pm.environment.get('userId') == 1 ) {",
									"    pm.test(\"Admin is able to approve the product\", () => {",
									"        pm.response.to.have.status(200);",
									"    })",
									"} else if (pm.environment.get('userId') == 2 ) {",
									"    pm.test(\"User must not be able to approve a product\", () => {",
									"        pm.response.to.have.status(500);",
									"    })",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"approved\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/products/{{productId}}",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"products",
								"{{productId}}"
							]
						},
						"description": "delete a product"
					},
					"response": []
				},
				{
					"name": "get User products",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8790b2ac-8dee-4bcc-98d0-5a7fabe83466",
								"exec": [
									"pm.test(\"All users should be able to get their own products. Nethertheless if approved or not\",() => {",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{uri}}/products/",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"products",
								""
							]
						},
						"description": "Request all products from the database (from all users)\nonly a logged in person should be able to do this"
					},
					"response": []
				},
				{
					"name": "get catalog",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "154e47e8-572d-48d1-bc10-3f9c5478d913",
								"exec": [
									"pm.test(\"Everyone should be able to get the catalog\", () => {",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{uri}}/products/catalog",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"products",
								"catalog"
							]
						},
						"description": "Request all products from the database (from all users)\nonly a logged in person should be able to do this"
					},
					"response": []
				},
				{
					"name": "get available catalog",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bbfc8e08-3874-4503-a642-5bf0dfa93de6",
								"exec": [
									"pm.test(\"Everyone should be able to get the catalog\", () => {",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{uri}}/products/catalog-available",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"products",
								"catalog-available"
							]
						},
						"description": "Request all products from the database (from all users)\nonly a logged in person should be able to do this"
					},
					"response": []
				},
				{
					"name": "get unavailable catalog user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "66c05373-ec9c-4c32-a69a-e67f06df7567",
								"exec": [
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"Sellers should be able to get their unavailable catalog\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"Sellers should receive their unavailable Products\", () => {",
									"    console.log(responseJson);",
									"    pm.expect(responseJson.productId).to.eql(5);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{uri}}/products/catalog-unavailable",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"products",
								"catalog-unavailable"
							]
						},
						"description": "Request all products from the database (from all users)\nonly a logged in person should be able to do this"
					},
					"response": []
				},
				{
					"name": "get catalog Guest",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "609ed69e-7443-4863-8a0c-25020883b117",
								"exec": [
									"pm.test(\"Everyone should be able to get the catalog\", () => {",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{uri}}/products/catalog",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"products",
								"catalog"
							]
						},
						"description": "Request all products from the database (from all users)\nonly a logged in person should be able to do this"
					},
					"response": []
				},
				{
					"name": "get all unapproved products",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b6b1ce94-1de4-4389-bed2-ba43dd78d67d",
								"exec": [
									"if (pm.environment.get('userId') == 1 ) {",
									"    pm.test(\"Admin is able to get all the unapproved products\", () => {",
									"        pm.response.to.have.status(200);",
									"    })",
									"} else if (pm.environment.get('userId') == 2 ) {",
									"    pm.test(\"User must not be able to get all the unapproved products\", () => {",
									"        pm.response.to.have.status(500);",
									"    })",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{uri}}/products/admin-catalog",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"products",
								"admin-catalog"
							]
						},
						"description": "Request all products from the database (from all users)\nonly a logged in person should be able to do this"
					},
					"response": []
				},
				{
					"name": "delete own product",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ec5fa113-32d3-4947-ad88-f3dd98c63906",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fb5623bd-748c-4bc7-b4fc-eee683988138",
								"exec": [
									"pm.test(\"All users are able to delete their product\", () => {",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{uri}}/products/{{productId}}",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"products",
								"{{productId}}"
							]
						},
						"description": "delete a product"
					},
					"response": []
				},
				{
					"name": "delete other users product",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "baffc041-32bd-43b6-8f8e-623012f1e54f",
								"exec": [
									"const echoPostRequest = {",
									"  url: 'http://' + pm.collectionVariables.get('uri') + '/products',",
									"  method: 'POST',",
									"  header: {",
									"      'Content-Type': 'application/json',",
									"      'Authorization': 'Bearer ' + pm.environment.get('currentAccessToken')",
									"  },",
									"  body: {",
									"    mode: 'application/json',",
									"    raw: JSON.stringify(",
									"        {",
									"            title: \"TestProdu21ct\",",
									"            type: 0,",
									"            description: \"This is a test product\",",
									"            location: \"Bern\",",
									"            sellOrLend: 0,",
									"            price: 120,",
									"            priceKind: 0,",
									"            status: 0,",
									"            deliverable: 1,",
									"            approved: 0,",
									"            userId: 2",
									"        })",
									"  }",
									"};",
									"",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"    console.log(err ? err : res.json());",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3f3db135-b16c-4144-a37b-5d3be201d39c",
								"exec": [
									"if (pm.environment.get('userId') == 1 ) {",
									"    pm.test(\"Admin is able to delete other users products\", () => {",
									"        pm.response.to.have.status(200);",
									"    })",
									"} else if (pm.environment.get('userId') == 2 ) {",
									"    pm.test(\"User must not be able to delete other users products\", () => {",
									"        pm.response.to.have.status(500);",
									"    })",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{uri}}/products/{{productId2}}",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"products",
								"{{productId2}}"
							]
						},
						"description": "delete a product"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "User Tests",
			"item": [
				{
					"name": "get user information",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "65bbb2b1-2773-4b23-a691-ab2c9e50ae07",
								"exec": [
									"pm.test(\"Every user should be able to get his account information\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"if (pm.environment.get('userId') == 1 ) {",
									"    pm.test(\"Verifying the response of admin account information\", () => {",
									"        const responseJson = pm.response.json();",
									"        pm.response.to.have.status(200);",
									"        pm.expect(responseJson.userName).to.eql('admin');",
									"        pm.expect(responseJson.email).to.eql('admin@example.com');",
									"        pm.expect(responseJson.firstName).to.eql('Admin');",
									"        pm.expect(responseJson.lastName).to.eql('istrator');",
									"        pm.expect(responseJson.isAdmin).to.eql(1);",
									"        pm.expect(responseJson.userId).to.eql(1);",
									"    })",
									"} else if (pm.environment.get('userId') == 2 ) {",
									"    pm.test(\"Verifying the response of user account information\", () => {",
									"        const responseJson = pm.response.json();",
									"        pm.response.to.have.status(200);",
									"        pm.expect(responseJson.userName).to.eql('user');",
									"        pm.expect(responseJson.email).to.eql('user@example.com');",
									"        pm.expect(responseJson.firstName).to.eql('Testing');",
									"        pm.expect(responseJson.lastName).to.eql('user');",
									"        pm.expect(responseJson.isAdmin).to.eql(0);",
									"        pm.expect(responseJson.userId).to.eql(2);",
									"    })",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{uri}}/user/",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"user",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "get all users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2110528d-12c7-4e9d-a4af-d5916082020d",
								"exec": [
									"if (pm.environment.get('userId') == 1 ) {",
									"    pm.test(\"Admin is able to get all the user information\", () => {",
									"        pm.response.to.have.status(200);",
									"    })",
									"} else if (pm.environment.get('userId') == 2 ) {",
									"    pm.test(\"User must not be able to get all users of system\", () => {",
									"        pm.response.to.have.status(500);",
									"    })",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{uri}}/user/all",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"user",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "update User info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b46c88e9-1685-4235-8a87-c01c81eb5aa1",
								"exec": [
									"pm.test(\"All users should be able to update their account information\", () => {",
									"    pm.response.to.have.status(200);",
									"",
									"})",
									"pm.test(\"Verify the updated attributes\", () => {",
									"    pm.response.to.have.status(200);",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.lastName).to.eql('updated lastName');",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"lastName\": \"updated lastName\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/user/update",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"user",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "user delete",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "93efe839-221e-4f9c-88f7-d1803101fbbb",
								"exec": [
									"const echoPostRequest = {",
									"  url: 'http://' + pm.collectionVariables.get('uri') + '/user/register',",
									"  method: 'POST',",
									"  header: 'Content-Type:application/json',",
									"  body: {",
									"    mode: 'application/json',",
									"    raw: JSON.stringify(",
									"        {",
									"            userName: \"testi2\",",
									"            password: \"notSecure12\",",
									"            email: \"testi2@example.com\",",
									"            lastName: \"ng\",",
									"            firstName: \"Testi\",",
									"            isAdmin: 1",
									"        })",
									"  }",
									"};",
									"",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"    console.log(err ? err : res.json());",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "663b096d-7fd4-4c66-ab7e-46b56d0fe0bf",
								"exec": [
									"if (pm.environment.get('userId') == 1 ) {",
									"    pm.test(\"Admin is able to get delete User with userId: \" + pm.environment.get('deleteUserId'), () => {",
									"        pm.response.to.have.status(200);",
									"    })",
									"} else if (pm.environment.get('userId') == 2 ) {",
									"    pm.test(\"User is able to delete own account\", () => {",
									"        pm.response.to.have.status(200);",
									"    })",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{uri}}/user/{{deleteUserId}}",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"user",
								"{{deleteUserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "user delete 2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "aacb69da-16b5-407c-b790-43216b30623a",
								"exec": [
									"const echoPostRequest = {",
									"  url: 'http://' + pm.collectionVariables.get('uri') + '/user/register',",
									"  method: 'POST',",
									"  header: 'Content-Type:application/json',",
									"  body: {",
									"    mode: 'application/json',",
									"    raw: JSON.stringify(",
									"        {",
									"            userName: \"testi3\",",
									"            password: \"notSecure12\",",
									"            email: \"testi3@example.com\",",
									"            lastName: \"ng\",",
									"            firstName: \"Testi\",",
									"            isAdmin: 1",
									"        })",
									"  }",
									"};",
									"",
									"const echoPostRequest2 = {",
									"  url: 'http://' + pm.collectionVariables.get('uri') + '/user/register',",
									"  method: 'POST',",
									"  header: 'Content-Type:application/json',",
									"  body: {",
									"    mode: 'application/json',",
									"    raw: JSON.stringify(",
									"        {",
									"            userName: \"testi4\",",
									"            password: \"notSecure12\",",
									"            email: \"testi4@example.com\",",
									"            lastName: \"ng\",",
									"            firstName: \"Testi\",",
									"            isAdmin: 1",
									"        })",
									"  }",
									"};",
									"",
									"const echoPostRequest3 = {",
									"  url: 'http://' + pm.collectionVariables.get('uri') + '/user/register',",
									"  method: 'POST',",
									"  header: 'Content-Type:application/json',",
									"  body: {",
									"    mode: 'application/json',",
									"    raw: JSON.stringify(",
									"        {",
									"            userName: \"testi5\",",
									"            password: \"notSecure12\",",
									"            email: \"testi5@example.com\",",
									"            lastName: \"ng\",",
									"            firstName: \"Testi\",",
									"            isAdmin: 1",
									"        })",
									"  }",
									"};",
									"",
									"pm.sendRequest(echoPostRequest3, function (err, res) {",
									"    console.log(err ? err : res.json());",
									"});",
									"",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"    console.log(err ? err : res.json());",
									"});",
									"",
									"pm.sendRequest(echoPostRequest2, function (err, res) {",
									"    console.log(err ? err : res.json());",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c6eb8e3d-35f3-4173-97c9-27480a3a6306",
								"exec": [
									"if (pm.environment.get('userId') == 1 ) {",
									"    pm.test(\"Admin is able to get delete User with userId: \" + pm.environment.get('deleteUserId2'), () => {",
									"        pm.response.to.have.status(200);",
									"    })",
									"} else if (pm.environment.get('userId') == 2 ) {",
									"    pm.test(\"User must not be able to delete other account\", () => {",
									"        pm.response.to.have.status(403);",
									"    })",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{uri}}/user/{{deleteUserId2}}",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"user",
								"{{deleteUserId2}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{currentAccessToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "4ca3e7f3-9efe-4067-9705-f5b0161d368d",
				"type": "text/javascript",
				"exec": [
					"const echoPostRequest = {",
					"  url: 'http://' + pm.collectionVariables.get('uri') + '/user/login',",
					"  method: 'POST',",
					"  header: 'Content-Type:application/json',",
					"  body: {",
					"    mode: 'application/json',",
					"    raw: JSON.stringify(",
					"        {",
					"        \tuserNameOrEmail: pm.environment.get('username'),",
					"        \tpassword: pm.environment.get('password')",
					"        })",
					"  }",
					"};",
					"",
					"pm.sendRequest(echoPostRequest, function (err, res) {",
					"    console.log(err ? err : res.json());",
					"    if (err === null) {",
					"        console.log('Saving the token and expiry date')",
					"        var responseJson = res.json();",
					"        pm.environment.set('currentAccessToken', responseJson.token)",
					"    }",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "6f286f0a-a09f-4c60-943f-518f459fd0ee",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "2b70a3ac-875e-43d3-bc4e-e791c0f7d530",
			"key": "currentAccessToken",
			"value": ""
		},
		{
			"id": "efda82c0-f968-4e01-9b44-80e88176f904",
			"key": "uri",
			"value": "localhost:3000"
		}
	],
	"protocolProfileBehavior": {}
}