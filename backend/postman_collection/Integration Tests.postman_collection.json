{
	"info": {
		"_postman_id": "f0bf7359-3e01-4130-aba8-dc80ba28d6b9",
		"name": "Integration Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Login and Register Tests",
			"item": [
				{
					"name": "user login fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "19482f39-fcbc-4de1-92dc-8137a7f8973a",
								"exec": [
									"pm.test(\"User should not login test\", function() {",
									"    pm.response.to.have.status(500);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userNameOrEmail\": \"Jonathan\",\r\n    \"password\": \"notSecure2\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/user/login",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "user login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c5e84843-a0e6-48c5-8340-3c7f49a6680a",
								"exec": [
									"pm.test(\"User user should be able to login\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"Verifying the response of the user login\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.response.to.have.status(200);",
									"    pm.expect(responseJson.user.userName).to.eql('user');",
									"    pm.expect(responseJson.user.email).to.eql('user@example.com');",
									"    pm.expect(responseJson.user.firstName).to.eql('Testing');",
									"    pm.expect(responseJson.user.lastName).to.eql('user');",
									"    pm.expect(responseJson.user.isAdmin).to.eql(0);",
									"    pm.expect(responseJson.user.userId).to.eql(2);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userNameOrEmail\":\"user\",\r\n    \"password\":\"notSecure12\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/user/login",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ad6ac3a3-027f-429e-a324-cfe8e9620033",
								"exec": [
									"pm.test(\"User admin should be able to login\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"Verifying the response of the user admin login\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.response.to.have.status(200);",
									"    pm.expect(responseJson.user.userName).to.eql('admin');",
									"    pm.expect(responseJson.user.email).to.eql('admin@example.com');",
									"    pm.expect(responseJson.user.firstName).to.eql('Admin');",
									"    pm.expect(responseJson.user.isAdmin).to.eql(1);",
									"    pm.expect(responseJson.user.userId).to.eql(1);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userNameOrEmail\": \"admin\",\r\n    \"password\": \"notSecure12\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/user/login",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "user registration",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc9cb9b6-a78e-473f-8e80-4b076bce44c7",
								"exec": [
									"pm.test(\"Registration should be possible\", () => {",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userName\":\"Testi\",\r\n    \"password\":\"notSecure12\",\r\n    \"email\":\"testi@example.com\",\r\n    \"lastName\":\"ng\",\r\n    \"firstName\":\"Testi\",\r\n    \"isAdmin\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/user/register",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"user",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "user registration same username",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "39006c1c-f998-4681-a852-eab903ff5587",
								"exec": [
									"pm.test(\"Guest should be unable to register with already used username\", () => {",
									"    pm.response.to.have.status(500);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userName\":\"Testi\",\r\n    \"password\":\"notSecure12\",\r\n    \"email\":\"testi2@example.com\",\r\n    \"lastName\":\"ng\",\r\n    \"firstName\":\"Testi\",\r\n    \"isAdmin\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/user/register",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"user",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "user registration same  email",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0ad87818-8674-47cb-aa75-5c5475d8c1f2",
								"exec": [
									"pm.test(\"Guest should be unable to register with already used email\", () => {",
									"    pm.response.to.have.status(500);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userName\":\"Testing\",\r\n    \"password\":\"notSecure12\",\r\n    \"email\":\"testi@example.com\",\r\n    \"lastName\":\"ng\",\r\n    \"firstName\":\"Testi\",\r\n    \"isAdmin\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/user/register",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"user",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "user registration forgotten fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3010517c-8384-46b8-b39e-c9bceb3fd1c2",
								"exec": [
									"pm.test(\"Guest should be unable to register if he forgot some attributes\", () => {",
									"    pm.response.to.have.status(500);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userName\":\"Testing\",\r\n    \"password\":\"notSecure12\",\r\n    \"email\":\"testi2@example.com\",\r\n    \"isAdmin\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/user/register",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"user",
								"register"
							]
						}
					},
					"response": []
				}
			],
			"description": "Integration tests that concerning the User controller in the backend\nNo token is used for these tests",
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c52b328f-841f-41f0-9e47-0f10d5c244f8",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "39711fd4-2a3d-4628-9ce4-c86fd4298b11",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Review Tests",
			"item": [
				{
					"name": "create a review",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "14e7a0ba-bccc-4d7c-b85d-3ea2382b83a3",
								"exec": [
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"All users should be able to create a review\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"",
									"pm.test(\"Verify the new review attribute\",() => {",
									"    pm.expect(responseJson.review).to.eql('This is by far the best product eva');",
									"    pm.expect(responseJson.productId).to.eql(parseInt(pm.environment.get('productId')));",
									"    pm.expect(responseJson.userId).to.eql(parseInt(pm.environment.get('userId')));",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"review\":\"This is by far the best product eva\",\r\n    \"productId\": {{productId}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/review",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"review"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Product Tests",
			"item": [
				{
					"name": "create Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d19e7430-eac1-40db-a84a-515fecbce9d3",
								"exec": [
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"All users should be able to create new products\",() => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"The new product should have the same userId as the creator\",() => {",
									"    pm.expect(responseJson.userId).to.eql(parseInt(pm.environment.get('userId')));",
									"})",
									"",
									"pm.test(\"New products should not be approved\",() => {",
									"    pm.expect(responseJson.approved).to.eql(0);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"TestProdu21ct\",\n    \"type\": 0,\n    \"description\": \"This is a test product\",\n    \"location\": \"Bern\",\n    \"sellOrLend\": 0,\n    \"price\": 120,\n    \"priceKind\": 0,\n    \"status\": 0,\n    \"deliverable\": 1,\n    \"approved\": 0,\n    \"userId\": {{userId}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/products",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "create Product Guest",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "00130345-3613-4d71-92db-8f68e83cbd0f",
								"exec": [
									"pm.test(\"Guests should not be able to create a product\",() => {",
									"    pm.response.to.have.status(403);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"TestProdu21ct\",\n    \"type\": 0,\n    \"description\": \"This is a test product\",\n    \"location\": \"Bern\",\n    \"sellOrLend\": 0,\n    \"price\": 120,\n    \"priceKind\": 0,\n    \"status\": 0,\n    \"deliverable\": 1,\n    \"approved\": 0,\n    \"userId\": {{userId}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/products",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "get specific product fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "def600ac-fca3-4117-946c-70dac6b449a5",
								"exec": [
									"if (pm.environment.get('userId') == 1 ) {",
									"    pm.test(\"Admin is able to get any specific product\", () => {",
									"        pm.response.to.have.status(200);",
									"    })",
									"} else if (pm.environment.get('userId') == 2 ) {",
									"    pm.test(\"User must not be able to get a specific unapproved product\", () => {",
									"        pm.response.to.have.status(500);",
									"    })",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{uri}}/products/{{productId2}}",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"products",
								"{{productId2}}"
							]
						},
						"description": "Request all products from the database (from all users)\nonly a logged in person should be able to do this"
					},
					"response": []
				},
				{
					"name": "update own product",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3010b932-8e43-4411-a7b0-31cc67b895ef",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "83514a84-2f48-4482-bc9e-a3ae5fcf35c3",
								"exec": [
									"pm.test(\"All users are able to update their product\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"Verify the updated attributes\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.title).to.eql('updatedTitle');",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"updatedTitle\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/products/{{productId}}",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"products",
								"{{productId}}"
							]
						},
						"description": "delete a product"
					},
					"response": []
				},
				{
					"name": "update other users product",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1bcab276-ded3-4960-acac-1d21e189010f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "07b9c3b2-0223-49b3-8d7c-8fd57ddda81b",
								"exec": [
									"if (pm.environment.get('userId') == 1 ) {",
									"    pm.test(\"Admin is able to update other users products\", () => {",
									"        pm.response.to.have.status(200);",
									"        const responseJson = pm.response.json();",
									"        pm.expect(responseJson.title).to.eql('updatedTitle2');",
									"    })",
									"} else if (pm.environment.get('userId') == 2 ) {",
									"    pm.test(\"User must not be able to update other users products\", () => {",
									"        pm.response.to.have.status(500);",
									"    })",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"updatedTitle2\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/products/{{productId2}}",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"products",
								"{{productId2}}"
							]
						},
						"description": "delete a product"
					},
					"response": []
				},
				{
					"name": "approve product",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "49431b3f-7c4f-468f-a7f2-310f7eff4a46",
								"exec": [
									"const echoPostRequest = {",
									"  url: 'http://' + pm.collectionVariables.get('uri') + '/products',",
									"  method: 'POST',",
									"  header: 'Content-Type:application/json',",
									"  body: {",
									"    mode: 'application/json',",
									"    raw: JSON.stringify(",
									"        {",
									"            title: \"TestProdu21ct\",",
									"            type: 0,",
									"            description: \"This is a test product\",",
									"            location: \"Bern\",",
									"            sellOrLend: 0,",
									"            price: 120,",
									"            priceKind: 0,",
									"            status: 0,",
									"            deliverable: 1,",
									"            approved: 0,",
									"            userId: pm.environment.get('userId')",
									"        })",
									"  }",
									"};",
									"",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"    console.log(err ? err : res.json());",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2dc5b6d7-ee5e-42e0-849b-ec7054add438",
								"exec": [
									"if (pm.environment.get('userId') == 1 ) {",
									"    pm.test(\"Admin is able to approve the product\", () => {",
									"        pm.response.to.have.status(200);",
									"    })",
									"} else if (pm.environment.get('userId') == 2 ) {",
									"    pm.test(\"User must not be able to approve a product\", () => {",
									"        pm.response.to.have.status(500);",
									"    })",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"approved\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/products/{{productId}}",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"products",
								"{{productId}}"
							]
						},
						"description": "delete a product"
					},
					"response": []
				},
				{
					"name": "approve product 2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "adc9fc61-f108-4bb6-9331-057c27dba1ff",
								"exec": [
									"const echoPostRequest = {",
									"  url: 'http://' + pm.collectionVariables.get('uri') + '/products',",
									"  method: 'POST',",
									"  header: 'Content-Type:application/json',",
									"  body: {",
									"    mode: 'application/json',",
									"    raw: JSON.stringify(",
									"        {",
									"            title: \"TestProdu21ct\",",
									"            type: 0,",
									"            description: \"This is a test product\",",
									"            location: \"Bern\",",
									"            sellOrLend: 0,",
									"            price: 120,",
									"            priceKind: 0,",
									"            status: 0,",
									"            deliverable: 1,",
									"            approved: 0,",
									"            userId: pm.environment.get('userId')",
									"        })",
									"  }",
									"};",
									"",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"    console.log(err ? err : res.json());",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9bf6aacd-c0ea-49a0-a287-8a186e38118f",
								"exec": [
									"if (pm.environment.get('userId') == 1 ) {",
									"    pm.test(\"Admin is able to approve the product\", () => {",
									"        pm.response.to.have.status(200);",
									"    })",
									"} else if (pm.environment.get('userId') == 2 ) {",
									"    pm.test(\"User must not be able to approve a product\", () => {",
									"        pm.response.to.have.status(500);",
									"    })",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"approved\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/products/2",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"products",
								"2"
							]
						},
						"description": "delete a product"
					},
					"response": []
				},
				{
					"name": "get specific product",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "30136f15-7e90-4077-afc9-814dec8abc92",
								"exec": [
									"pm.test(\"All users should be able to get a specific approved product\",() => {",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{uri}}/products/{{productId}}",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"products",
								"{{productId}}"
							]
						},
						"description": "Request all products from the database (from all users)\nonly a logged in person should be able to do this"
					},
					"response": []
				},
				{
					"name": "get User products",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b4bc8b27-3208-4b8e-a88d-159eb64859d2",
								"exec": [
									"pm.test(\"All users should be able to get their own products. Nethertheless if approved or not\",() => {",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{uri}}/products/",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"products",
								""
							]
						},
						"description": "Request all products from the database (from all users)\nonly a logged in person should be able to do this"
					},
					"response": []
				},
				{
					"name": "get catalog",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c5447b34-96c1-4a64-a1f3-8b0b70fdd51a",
								"exec": [
									"pm.test(\"Everyone should be able to get the catalog\", () => {",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{uri}}/products/catalog",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"products",
								"catalog"
							]
						},
						"description": "Request all products from the database (from all users)\nonly a logged in person should be able to do this"
					},
					"response": []
				},
				{
					"name": "get catalog Guest",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "33b9769b-0232-42cb-a410-a1228e7a1c9a",
								"exec": [
									"pm.test(\"Everyone should be able to get the catalog\", () => {",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{uri}}/products/catalog",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"products",
								"catalog"
							]
						},
						"description": "Request all products from the database (from all users)\nonly a logged in person should be able to do this"
					},
					"response": []
				},
				{
					"name": "get all unapproved products",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ddba856b-1e53-444a-bdf6-eff9d2c15add",
								"exec": [
									"if (pm.environment.get('userId') == 1 ) {",
									"    pm.test(\"Admin is able to get all the unapproved products\", () => {",
									"        pm.response.to.have.status(200);",
									"    })",
									"} else if (pm.environment.get('userId') == 2 ) {",
									"    pm.test(\"User must not be able to get all the unapproved products\", () => {",
									"        pm.response.to.have.status(500);",
									"    })",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{uri}}/products/admin-catalog",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"products",
								"admin-catalog"
							]
						},
						"description": "Request all products from the database (from all users)\nonly a logged in person should be able to do this"
					},
					"response": []
				},
				{
					"name": "delete own product",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ed5ebe5a-b393-435c-a9ec-0a4d92a2bf79",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9fbc6444-8e0b-49f9-9a97-aa3619407dfe",
								"exec": [
									"pm.test(\"All users are able to delete their product\", () => {",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{uri}}/products/{{productId}}",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"products",
								"{{productId}}"
							]
						},
						"description": "delete a product"
					},
					"response": []
				},
				{
					"name": "delete other users product",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8fcf4200-8c09-40d4-94f7-2cafb3923720",
								"exec": [
									"const echoPostRequest = {",
									"  url: 'http://' + pm.collectionVariables.get('uri') + '/products',",
									"  method: 'POST',",
									"  header: 'Content-Type:application/json',",
									"  body: {",
									"    mode: 'application/json',",
									"    raw: JSON.stringify(",
									"        {",
									"            title: \"TestProdu21ct\",",
									"            type: 0,",
									"            description: \"This is a test product\",",
									"            location: \"Bern\",",
									"            sellOrLend: 0,",
									"            price: 120,",
									"            priceKind: 0,",
									"            status: 0,",
									"            deliverable: 1,",
									"            approved: 0,",
									"            userId: 2",
									"        })",
									"  }",
									"};",
									"",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"    console.log(err ? err : res.json());",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "899b33d4-d161-4b53-97d1-c59031ae182e",
								"exec": [
									"if (pm.environment.get('userId') == 1 ) {",
									"    pm.test(\"Admin is able to delete other users products\", () => {",
									"        pm.response.to.have.status(200);",
									"    })",
									"} else if (pm.environment.get('userId') == 2 ) {",
									"    pm.test(\"User must not be able to delete other users products\", () => {",
									"        pm.response.to.have.status(500);",
									"    })",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{uri}}/products/{{productId2}}",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"products",
								"{{productId2}}"
							]
						},
						"description": "delete a product"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "User Tests",
			"item": [
				{
					"name": "get user information",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cd250a32-b48c-433c-961b-f1085e10225b",
								"exec": [
									"pm.test(\"Every user should be able to get his account information\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"if (pm.environment.get('userId') == 1 ) {",
									"    pm.test(\"Verifying the response of admin account information\", () => {",
									"        const responseJson = pm.response.json();",
									"        pm.response.to.have.status(200);",
									"        pm.expect(responseJson.userName).to.eql('admin');",
									"        pm.expect(responseJson.email).to.eql('admin@example.com');",
									"        pm.expect(responseJson.firstName).to.eql('Admin');",
									"        pm.expect(responseJson.lastName).to.eql('istrator');",
									"        pm.expect(responseJson.isAdmin).to.eql(1);",
									"        pm.expect(responseJson.userId).to.eql(1);",
									"    })",
									"} else if (pm.environment.get('userId') == 2 ) {",
									"    pm.test(\"Verifying the response of user account information\", () => {",
									"        const responseJson = pm.response.json();",
									"        pm.response.to.have.status(200);",
									"        pm.expect(responseJson.userName).to.eql('user');",
									"        pm.expect(responseJson.email).to.eql('user@example.com');",
									"        pm.expect(responseJson.firstName).to.eql('Testing');",
									"        pm.expect(responseJson.lastName).to.eql('user');",
									"        pm.expect(responseJson.isAdmin).to.eql(0);",
									"        pm.expect(responseJson.userId).to.eql(2);",
									"    })",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{uri}}/user/",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"user",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "get all users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6b70234b-933d-48d8-849e-8519ae8d0842",
								"exec": [
									"if (pm.environment.get('userId') == 1 ) {",
									"    pm.test(\"Admin is able to get all the user information\", () => {",
									"        pm.response.to.have.status(200);",
									"    })",
									"} else if (pm.environment.get('userId') == 2 ) {",
									"    pm.test(\"User must not be able to get all users of system\", () => {",
									"        pm.response.to.have.status(500);",
									"    })",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{uri}}/user/all",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"user",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "update User info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d4c0d2c0-ef1c-445e-869c-61d466a3c18e",
								"exec": [
									"pm.test(\"All users should be able to update their account information\", () => {",
									"    pm.response.to.have.status(200);",
									"",
									"})",
									"pm.test(\"Verify the updated attributes\", () => {",
									"    pm.response.to.have.status(200);",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.lastName).to.eql('updated lastName');",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"lastName\": \"updated lastName\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/user/update",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"user",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "user delete",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "dc984f1e-39d4-4a2b-b6c7-f9f486563ca7",
								"exec": [
									"const echoPostRequest = {",
									"  url: 'http://' + pm.collectionVariables.get('uri') + '/user/register',",
									"  method: 'POST',",
									"  header: 'Content-Type:application/json',",
									"  body: {",
									"    mode: 'application/json',",
									"    raw: JSON.stringify(",
									"        {",
									"            userName: \"testi2\",",
									"            password: \"notSecure12\",",
									"            email: \"testi2@example.com\",",
									"            lastName: \"ng\",",
									"            firstName: \"Testi\",",
									"            isAdmin: 1",
									"        })",
									"  }",
									"};",
									"",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"    console.log(err ? err : res.json());",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "45a6b090-8e17-4163-a8f4-00f48c0fa4f6",
								"exec": [
									"if (pm.environment.get('userId') == 1 ) {",
									"    pm.test(\"Admin is able to get delete User with userId: \" + pm.environment.get('deleteUserId'), () => {",
									"        pm.response.to.have.status(200);",
									"    })",
									"} else if (pm.environment.get('userId') == 2 ) {",
									"    pm.test(\"User is able to delete own account\", () => {",
									"        pm.response.to.have.status(200);",
									"    })",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{uri}}/user/{{deleteUserId}}",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"user",
								"{{deleteUserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "user delete 2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d61575e3-cb28-41c6-96a8-7233e54bea01",
								"exec": [
									"const echoPostRequest = {",
									"  url: 'http://' + pm.collectionVariables.get('uri') + '/user/register',",
									"  method: 'POST',",
									"  header: 'Content-Type:application/json',",
									"  body: {",
									"    mode: 'application/json',",
									"    raw: JSON.stringify(",
									"        {",
									"            userName: \"testi3\",",
									"            password: \"notSecure12\",",
									"            email: \"testi3@example.com\",",
									"            lastName: \"ng\",",
									"            firstName: \"Testi\",",
									"            isAdmin: 1",
									"        })",
									"  }",
									"};",
									"",
									"const echoPostRequest2 = {",
									"  url: 'http://' + pm.collectionVariables.get('uri') + '/user/register',",
									"  method: 'POST',",
									"  header: 'Content-Type:application/json',",
									"  body: {",
									"    mode: 'application/json',",
									"    raw: JSON.stringify(",
									"        {",
									"            userName: \"testi4\",",
									"            password: \"notSecure12\",",
									"            email: \"testi4@example.com\",",
									"            lastName: \"ng\",",
									"            firstName: \"Testi\",",
									"            isAdmin: 1",
									"        })",
									"  }",
									"};",
									"",
									"const echoPostRequest3 = {",
									"  url: 'http://' + pm.collectionVariables.get('uri') + '/user/register',",
									"  method: 'POST',",
									"  header: 'Content-Type:application/json',",
									"  body: {",
									"    mode: 'application/json',",
									"    raw: JSON.stringify(",
									"        {",
									"            userName: \"testi5\",",
									"            password: \"notSecure12\",",
									"            email: \"testi5@example.com\",",
									"            lastName: \"ng\",",
									"            firstName: \"Testi\",",
									"            isAdmin: 1",
									"        })",
									"  }",
									"};",
									"",
									"pm.sendRequest(echoPostRequest3, function (err, res) {",
									"    console.log(err ? err : res.json());",
									"});",
									"",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"    console.log(err ? err : res.json());",
									"});",
									"",
									"pm.sendRequest(echoPostRequest2, function (err, res) {",
									"    console.log(err ? err : res.json());",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "dc5da66d-a94d-4531-9876-6bf701b68879",
								"exec": [
									"if (pm.environment.get('userId') == 1 ) {",
									"    pm.test(\"Admin is able to get delete User with userId: \" + pm.environment.get('deleteUserId2'), () => {",
									"        pm.response.to.have.status(200);",
									"    })",
									"} else if (pm.environment.get('userId') == 2 ) {",
									"    pm.test(\"User must not be able to delete other account\", () => {",
									"        pm.response.to.have.status(403);",
									"    })",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{uri}}/user/{{deleteUserId2}}",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"user",
								"{{deleteUserId2}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{currentAccessToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "0e91fe68-1e6e-41a7-a186-031c99bce228",
				"type": "text/javascript",
				"exec": [
					"const echoPostRequest = {",
					"  url: 'http://' + pm.collectionVariables.get('uri') + '/user/login',",
					"  method: 'POST',",
					"  header: 'Content-Type:application/json',",
					"  body: {",
					"    mode: 'application/json',",
					"    raw: JSON.stringify(",
					"        {",
					"        \tuserNameOrEmail: pm.environment.get('username'),",
					"        \tpassword: pm.environment.get('password')",
					"        })",
					"  }",
					"};",
					"",
					"pm.sendRequest(echoPostRequest, function (err, res) {",
					"    console.log(err ? err : res.json());",
					"    if (err === null) {",
					"        console.log('Saving the token and expiry date')",
					"        var responseJson = res.json();",
					"        pm.environment.set('currentAccessToken', responseJson.token)",
					"    }",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "562935ad-17f0-4b5f-8125-fd565749ee65",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "dc821e2a-abbd-434c-b9f8-92a7aa9d4a49",
			"key": "currentAccessToken",
			"value": ""
		},
		{
			"id": "5ba1e863-bc90-424c-bbf0-c3253a058a3e",
			"key": "uri",
			"value": "localhost:3000"
		}
	],
	"protocolProfileBehavior": {}
}