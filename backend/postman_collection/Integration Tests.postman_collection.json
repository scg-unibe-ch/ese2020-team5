{
	"info": {
		"_postman_id": "6bc9019d-e6f7-4f3d-931b-3523d33db4fb",
		"name": "Integration Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Login and Register Tests",
			"item": [
				{
					"name": "user login fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d6c20414-b210-45be-bf36-bfb1e128bf43",
								"exec": [
									"pm.test(\"User should not login test\", function() {",
									"    pm.response.to.have.status(500);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userNameOrEmail\": \"Jonathan\",\r\n    \"password\": \"notSecure2\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/user/login",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "user login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "13dbb43d-0b4d-4622-83db-0af6c80415e4",
								"exec": [
									"pm.test(\"User user should be able to login\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"Verifying the response of the user login\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.response.to.have.status(200);",
									"    pm.expect(responseJson.user.userName).to.eql('user');",
									"    pm.expect(responseJson.user.email).to.eql('user@example.com');",
									"    pm.expect(responseJson.user.firstName).to.eql('Testing');",
									"    pm.expect(responseJson.user.lastName).to.eql('user');",
									"    pm.expect(responseJson.user.isAdmin).to.eql(0);",
									"    pm.expect(responseJson.user.userId).to.eql(2);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userNameOrEmail\":\"user\",\r\n    \"password\":\"notSecure12\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/user/login",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8022284c-0c28-4caa-b60b-8cb80343429b",
								"exec": [
									"pm.test(\"User admin should be able to login\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"Verifying the response of the user admin login\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.response.to.have.status(200);",
									"    pm.expect(responseJson.user.userName).to.eql('admin');",
									"    pm.expect(responseJson.user.email).to.eql('admin@example.com');",
									"    pm.expect(responseJson.user.firstName).to.eql('Admin');",
									"    pm.expect(responseJson.user.isAdmin).to.eql(1);",
									"    pm.expect(responseJson.user.userId).to.eql(1);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userNameOrEmail\": \"admin\",\r\n    \"password\": \"notSecure12\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/user/login",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "user registration",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f84739ea-4336-422c-b5c6-5db9a7b39de1",
								"exec": [
									"pm.test(\"Registration should be possible\", () => {",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userName\":\"Testi\",\r\n    \"password\":\"notSecure12\",\r\n    \"email\":\"testi@example.com\",\r\n    \"lastName\":\"ng\",\r\n    \"firstName\":\"Testi\",\r\n    \"isAdmin\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/user/register",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"user",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "user registration same username",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2c286556-c681-4d5b-a8f0-b332fe268566",
								"exec": [
									"pm.test(\"Guest should be unable to register with already used username\", () => {",
									"    pm.response.to.have.status(500);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userName\":\"Testi\",\r\n    \"password\":\"notSecure12\",\r\n    \"email\":\"testi2@example.com\",\r\n    \"lastName\":\"ng\",\r\n    \"firstName\":\"Testi\",\r\n    \"isAdmin\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/user/register",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"user",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "user registration same  email",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a521f1cd-2f73-491b-a86a-2492a9298e7d",
								"exec": [
									"pm.test(\"Guest should be unable to register with already used email\", () => {",
									"    pm.response.to.have.status(500);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userName\":\"Testing\",\r\n    \"password\":\"notSecure12\",\r\n    \"email\":\"testi@example.com\",\r\n    \"lastName\":\"ng\",\r\n    \"firstName\":\"Testi\",\r\n    \"isAdmin\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/user/register",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"user",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "user registration forgotten fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c83e1872-15ee-4df5-bb36-579621c54e9a",
								"exec": [
									"pm.test(\"Guest should be unable to register if he forgot some attributes\", () => {",
									"    pm.response.to.have.status(500);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userName\":\"Testing\",\r\n    \"password\":\"notSecure12\",\r\n    \"email\":\"testi2@example.com\",\r\n    \"isAdmin\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/user/register",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"user",
								"register"
							]
						}
					},
					"response": []
				}
			],
			"description": "Integration tests that concerning the User controller in the backend\nNo token is used for these tests",
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "7747902d-0661-4b95-a7d1-0ddf2d6e93f6",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "90e2dad3-fbc9-4301-99e7-20efdef61f12",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Notification Tests",
			"item": [
				{
					"name": "create Notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "475e4374-11bb-4365-832c-498a5db9a441",
								"exec": [
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"All users should be able to create a review\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"Check the parameters of the notification\", () => {",
									"    pm.expect(responseJson.userId).to.eql(pm.environment.get('userId').toNumber());",
									"    pm.expect(responseJson.text).to.eql(\"This is a sample notificaiton\");",
									"    pm.expect(responseJson.read).to.eql(0);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"This is a sample notificaiton\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/notification",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"notification"
							]
						}
					},
					"response": []
				},
				{
					"name": "get notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bb19aa9f-cf88-4532-ba56-912b1742a257",
								"exec": [
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"All users should be able to create a review\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"Check the parameters of the notification\", () => {",
									"    pm.expect(responseJson[0].userId).to.eql(pm.environment.get('userId').toNumber());",
									"    pm.expect(responseJson[0].text).to.eql(\"This is a sample notificaiton\");",
									"    pm.expect(responseJson[0].read).to.eql(0);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{uri}}/notification",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"notification"
							]
						}
					},
					"response": []
				},
				{
					"name": "read notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4b88e757-cbe8-473c-995e-503d60083baf",
								"exec": [
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"All users should be able to create a review\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"Check the parameters of the notification\", () => {",
									"    pm.expect(responseJson.userId).to.eql(pm.environment.get('userId').toNumber());",
									"    pm.expect(responseJson.text).to.eql(\"This is a sample notificaiton\");",
									"    pm.expect(responseJson.read).to.eql(1);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "http://{{uri}}/notification/{{userId}}",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"notification",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "read notification Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9eadc0d4-cf32-47b0-b0fe-da5c521f4726",
								"exec": [
									"pm.test(\"All users should be able to create a review\", () => {",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{uri}}/notification/{{userId}}",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"notification",
								"{{userId}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Review Tests",
			"item": [
				{
					"name": "create a review",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd93b961-30de-40e6-8a43-3d52946133fe",
								"exec": [
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"All users should be able to create a review\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"",
									"pm.test(\"Verify the new review attribute\",() => {",
									"    pm.expect(responseJson.review).to.eql('This is by far the best product eva');",
									"    pm.expect(responseJson.productId).to.eql(parseInt(pm.environment.get('productId')));",
									"    pm.expect(responseJson.userId).to.eql(parseInt(pm.environment.get('userId')));",
									"    pm.expect(responseJson.rating).to.eql(3);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"review\":\"This is by far the best product eva\",\r\n    \"productId\": {{productId}},\r\n    \"rating\": 3\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/review",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"review"
							]
						}
					},
					"response": []
				},
				{
					"name": "update a review",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "10050a8f-a3c1-4b44-a9f0-6bf6f3260d83",
								"exec": [
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"All users should be able to update their review\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"",
									"pm.test(\"Verify the new review attribute\",() => {",
									"    pm.expect(responseJson.review).to.eql('This is by far the best product eva');",
									"    pm.expect(responseJson.rating).to.eql(3);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"review\":\"This is by far the best product eva\",\r\n    \"productId\": {{productId}},\r\n    \"rating\": 3\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/review/{{ownReviewId}}",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"review",
								"{{ownReviewId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update a review with rating out of range",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2fa7ccfe-5e4f-43c1-b3d9-995848c1db4c",
								"exec": [
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"Update should fail\", () => {",
									"    pm.response.to.have.status(500);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"review\":\"This is by far the best product eva\",\r\n    \"productId\": {{productId}},\r\n    \"rating\": 1000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/review/{{ownReviewId}}",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"review",
								"{{ownReviewId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "user delete own review",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "31e03b21-671d-476a-bc76-07e2fc20c182",
								"exec": [
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"User is able to delete own review\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/review/{{deleteOwnReviewId}}",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"review",
								"{{deleteOwnReviewId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "user delete other review",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "04800e46-d2d1-4cdf-b218-a58dd7e5aeab",
								"exec": [
									"const responseJson = pm.response.json();",
									"",
									"if (pm.environment.get('userId') == 1 ) {",
									"    pm.test(\"Admin is able to delete other review\", () => {",
									"        pm.response.to.have.status(200);",
									"    })",
									"} else if (pm.environment.get('userId') == 2 ) {",
									"    pm.test(\"User is not able to delete other review\", () => {",
									"        pm.response.to.have.status(500);",
									"    })",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"review\":\"This is by far the best product eva\",\r\n    \"productId\": {{productId}},\r\n    \"rating\": 3\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/review/{{deleteOtherReviewId}}",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"review",
								"{{deleteOtherReviewId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create a review rating out of range",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc6fc9ae-73f5-4435-9e65-ee17d89a5821",
								"exec": [
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"Cannot create a review with a rating out of range\",() => {",
									"    pm.response.to.have.status(500);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"review\":\"This is by far the best product eva\",\r\n    \"productId\": {{productId}},\r\n    \"rating\": 1000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/review",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"review"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "ShoppingCart Tests",
			"item": [
				{
					"name": "empty Shopping Cart error",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cc6c7bc2-0dd5-4c0a-bbd4-9f7e7a9fb4a4",
								"exec": [
									"pm.test(\"User should be able to buy its shopping cart\",() => {",
									"    pm.response.to.have.status(500);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://{{uri}}/cart/buy",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"cart",
								"buy"
							]
						}
					},
					"response": []
				},
				{
					"name": "create ShoppingCart entry",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9fde61cb-8d5e-4cd7-9f1f-85ceb99a9af6",
								"exec": [
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"User should be able to add items to its shopping cart\",() => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"Check the response attributes\", () => {",
									"    pm.expect(responseJson.buyerId).to.eql(pm.environment.get('userId').toNumber());",
									"    pm.expect(responseJson.buyerId).to.be.an('number');",
									"    pm.expect(responseJson.productId).to.eql(2);",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b599ed53-0d27-4c7b-9145-f5f78a5bf60a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amountOrTime\": 4\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/cart/2",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"cart",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add same product = update amountOrTime",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4ebb3737-3f71-4fba-bb1d-0697adb6f28e",
								"exec": [
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"User should be able to add items to its shopping cart\",() => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"Check the response attributes\", () => {",
									"    pm.expect(responseJson.buyerId).to.eql(pm.environment.get('userId').toNumber());",
									"    pm.expect(responseJson.buyerId).to.be.an('number');",
									"    pm.expect(responseJson.productId).to.eql(2);",
									"    pm.expect(responseJson.amountOrTime).to.be.eql(8);",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4c251c8b-85a5-4b4a-be4f-8f8f4f0d1274",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amountOrTime\": 4\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/cart/2",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"cart",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "get ShoppingCart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3234f762-a319-46f9-94e5-1207eb8f9f3b",
								"exec": [
									"pm.test(\"User should be able to add items to its shopping cart\",() => {",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amountOrTime\": 2\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/cart/",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"cart",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "update ShoppingCart entry",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "22f39de5-c269-4bd0-afdb-d4f495b8784c",
								"exec": [
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"User should be able to add items to its shopping cart\",() => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"Check the response attributes\", () => {",
									"    pm.expect(responseJson.buyerId).to.eql(pm.environment.get('userId').toNumber());",
									"    pm.expect(responseJson.buyerId).to.be.an('number');",
									"    pm.expect(responseJson.productId).to.eql(2);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amountOrTime\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/cart/2",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"cart",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete ShoppingCart entry",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dde7426d-43c8-480c-8027-d27ee9be3451",
								"exec": [
									"pm.test(\"User should be able to add items to its shopping cart\",() => {",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{uri}}/cart/2",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"cart",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "create ShoppingCart with wrong productId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "56b9079c-47ed-4c5c-8095-75ccbbf17a6f",
								"exec": [
									"pm.test(\"Return error if the product is not found\",() => {",
									"    pm.response.to.have.status(500);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amountOrTime\": 4\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/cart/100",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"cart",
								"100"
							]
						}
					},
					"response": []
				},
				{
					"name": "create ShoppingCart with unapproved product",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "350f5e0c-6875-4db7-b55b-432c25479c8a",
								"exec": [
									"pm.test(\"Return error if the product is not approved\",() => {",
									"    pm.response.to.have.status(500);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amountOrTime\": 4\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/cart/1",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"cart",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "successfull buy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "65300e00-272b-4e56-a6c8-a74d636f874b",
								"exec": [
									"if (pm.environment.get('userId') == 1 ) {",
									"    pm.test(\"Admin should be able to buy its shopping cart\",() => {",
									"        pm.response.to.have.status(200);",
									"    })",
									"} else {",
									"    pm.test(\"User won't have enough credits\", () => {",
									"        pm.response.to.have.status(500);",
									"    })",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9a4f549e-45a2-4412-8b7f-daef572db3d5",
								"exec": [
									"const echoPostRequest = {",
									"  url: 'http://' + pm.collectionVariables.get('uri') + '/cart/2',",
									"  method: 'POST',",
									"  header: {",
									"      'Content-Type': 'application/json',",
									"      'Authorization': 'Bearer ' + pm.environment.get('currentAccessToken')",
									"    },",
									"  body: {",
									"    mode: 'application/json',",
									"    raw: JSON.stringify(",
									"        {",
									"            amountOrTime: pm.environment.get('deleteUserId2')",
									"        })",
									"  }",
									"};",
									"",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"    console.log(err ? err : res.json());",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://{{uri}}/cart/buy",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"cart",
								"buy"
							]
						}
					},
					"response": []
				}
			],
			"description": "Test the transactions",
			"protocolProfileBehavior": {}
		},
		{
			"name": "Wishlist Tests",
			"item": [
				{
					"name": "create Wishlist entry",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3789bb93-2f88-4f5e-beb5-3db4333dc046",
								"exec": [
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"User should be able to add items to its shopping cart\",() => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"Check the response attributes\", () => {",
									"    pm.expect(responseJson.buyerId).to.eql(pm.environment.get('userId').toNumber());",
									"    pm.expect(responseJson.buyerId).to.be.an('number');",
									"    pm.expect(responseJson.productId).to.eql(2);",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f069ed13-db2d-4fbf-8dec-beb52163aad3",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amountOrTime\": 4\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/wishlist/2",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"wishlist",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "get Wishlist",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0bf4b923-53d5-4e44-8b87-553e33489057",
								"exec": [
									"pm.test(\"User should be able to add items to its shopping cart\",() => {",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amountOrTime\": 2\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/wishlist/",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"wishlist",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "delete Wishlist entry",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6fe23779-9b26-4106-bb5f-2c42e17ef457",
								"exec": [
									"pm.test(\"User should be able to add items to its shopping cart\",() => {",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{uri}}/wishlist/2",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"wishlist",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "create Wishlist with wrong productId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "028233eb-8659-46a2-ad5d-2e67e0ad2928",
								"exec": [
									"pm.test(\"Return error if the product is not found\",() => {",
									"    pm.response.to.have.status(500);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amountOrTime\": 4\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/wishlist/100",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"wishlist",
								"100"
							]
						}
					},
					"response": []
				},
				{
					"name": "create Wishlist with unapproved product",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "40b3c4cf-b408-4e0f-a49d-377a875346c4",
								"exec": [
									"pm.test(\"Return error if the product is not approved\",() => {",
									"    pm.response.to.have.status(500);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amountOrTime\": 4\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/wishlist/1",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"wishlist",
								"1"
							]
						}
					},
					"response": []
				}
			],
			"description": "Test the transactions",
			"protocolProfileBehavior": {}
		},
		{
			"name": "Product Tests",
			"item": [
				{
					"name": "create Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e4771b9a-50de-4e38-a784-9ac360f30d64",
								"exec": [
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"All users should be able to create new products\",() => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"The new product should have the same userId as the creator\",() => {",
									"    pm.expect(responseJson.userId).to.eql(parseInt(pm.environment.get('userId')));",
									"})",
									"",
									"pm.test(\"New products should not be approved\",() => {",
									"    pm.expect(responseJson.approved).to.eql(0);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"TestProdu21ct\",\n    \"type\": 0,\n    \"description\": \"This is a test product\",\n    \"location\": \"Bern\",\n    \"sellOrLend\": 0,\n    \"price\": 120,\n    \"priceKind\": 0,\n    \"status\": 0,\n    \"deliverable\": 1,\n    \"approved\": 0,\n    \"userId\": {{userId}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/products",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "create Product Guest",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c75610e9-2ec2-416e-8f74-a719d787e979",
								"exec": [
									"pm.test(\"Guests should not be able to create a product\",() => {",
									"    pm.response.to.have.status(403);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"TestProdu21ct\",\n    \"type\": 0,\n    \"description\": \"This is a test product\",\n    \"location\": \"Bern\",\n    \"sellOrLend\": 0,\n    \"price\": 120,\n    \"priceKind\": 0,\n    \"status\": 0,\n    \"deliverable\": 1,\n    \"approved\": 0,\n    \"userId\": {{userId}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/products",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "update own product",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "244feaee-8c45-40d9-8bc4-fa52dcd6d8da",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "bf1304c0-6933-457d-a11e-62bf4e10eaff",
								"exec": [
									"pm.test(\"All users are able to update their product\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"Verify the updated attributes\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.title).to.eql('updatedTitle');",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"updatedTitle\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/products/{{productId}}",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"products",
								"{{productId}}"
							]
						},
						"description": "delete a product"
					},
					"response": []
				},
				{
					"name": "update other users product",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9028e743-9c3f-40ab-b0fa-8df3b2c5542d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "077f7873-0a19-45d0-aae2-c72d3b021cf5",
								"exec": [
									"if (pm.environment.get('userId') == 1 ) {",
									"    pm.test(\"Admin is able to update other users products\", () => {",
									"        pm.response.to.have.status(200);",
									"        const responseJson = pm.response.json();",
									"        pm.expect(responseJson.title).to.eql('updatedTitle2');",
									"    })",
									"} else if (pm.environment.get('userId') == 2 ) {",
									"    pm.test(\"User must not be able to update other users products\", () => {",
									"        pm.response.to.have.status(500);",
									"    })",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"updatedTitle2\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/products/{{productId2}}",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"products",
								"{{productId2}}"
							]
						},
						"description": "delete a product"
					},
					"response": []
				},
				{
					"name": "approve product",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2c5715aa-38ff-495c-9b3d-4dedbbd9b48a",
								"exec": [
									"const echoPostRequest = {",
									"  url: 'http://' + pm.collectionVariables.get('uri') + '/products',",
									"  method: 'POST',",
									"  header: 'Content-Type:application/json',",
									"  body: {",
									"    mode: 'application/json',",
									"    raw: JSON.stringify(",
									"        {",
									"            title: \"TestProdu21ct\",",
									"            type: 0,",
									"            description: \"This is a test product\",",
									"            location: \"Bern\",",
									"            sellOrLend: 0,",
									"            price: 120,",
									"            priceKind: 0,",
									"            status: 0,",
									"            deliverable: 1,",
									"            approved: 0,",
									"            userId: pm.environment.get('userId')",
									"        })",
									"  }",
									"};",
									"",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"    console.log(err ? err : res.json());",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "604570dc-8168-4603-8622-dcca41812319",
								"exec": [
									"if (pm.environment.get('userId') == 1 ) {",
									"    pm.test(\"Admin is able to approve the product\", () => {",
									"        pm.response.to.have.status(200);",
									"    })",
									"} else if (pm.environment.get('userId') == 2 ) {",
									"    pm.test(\"User must not be able to approve a product\", () => {",
									"        pm.response.to.have.status(500);",
									"    })",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"approved\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/products/{{productId}}",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"products",
								"{{productId}}"
							]
						},
						"description": "delete a product"
					},
					"response": []
				},
				{
					"name": "get User products",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3301c713-9272-4618-89c4-19a2d173c026",
								"exec": [
									"pm.test(\"All users should be able to get their own products. Nethertheless if approved or not\",() => {",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{uri}}/products/",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"products",
								""
							]
						},
						"description": "Request all products from the database (from all users)\nonly a logged in person should be able to do this"
					},
					"response": []
				},
				{
					"name": "get catalog",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "36285513-cc19-4462-818e-aeaac6bacbd0",
								"exec": [
									"pm.test(\"Everyone should be able to get the catalog\", () => {",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{uri}}/products/catalog",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"products",
								"catalog"
							]
						},
						"description": "Request all products from the database (from all users)\nonly a logged in person should be able to do this"
					},
					"response": []
				},
				{
					"name": "get catalog Guest",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bcef424f-a4c2-42cd-898d-b90ecec9b43d",
								"exec": [
									"pm.test(\"Everyone should be able to get the catalog\", () => {",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{uri}}/products/catalog",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"products",
								"catalog"
							]
						},
						"description": "Request all products from the database (from all users)\nonly a logged in person should be able to do this"
					},
					"response": []
				},
				{
					"name": "get all unapproved products",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3287fee6-161f-443f-8c45-a67037205d26",
								"exec": [
									"if (pm.environment.get('userId') == 1 ) {",
									"    pm.test(\"Admin is able to get all the unapproved products\", () => {",
									"        pm.response.to.have.status(200);",
									"    })",
									"} else if (pm.environment.get('userId') == 2 ) {",
									"    pm.test(\"User must not be able to get all the unapproved products\", () => {",
									"        pm.response.to.have.status(500);",
									"    })",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{uri}}/products/admin-catalog",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"products",
								"admin-catalog"
							]
						},
						"description": "Request all products from the database (from all users)\nonly a logged in person should be able to do this"
					},
					"response": []
				},
				{
					"name": "delete own product",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1ca1feef-a93c-4e4a-9d96-97b7003a9371",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "000531d5-f3fe-4511-985f-2efe44563787",
								"exec": [
									"pm.test(\"All users are able to delete their product\", () => {",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{uri}}/products/{{productId}}",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"products",
								"{{productId}}"
							]
						},
						"description": "delete a product"
					},
					"response": []
				},
				{
					"name": "delete other users product",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ebea077d-3209-4fbb-b53b-4f67dcf470fe",
								"exec": [
									"const echoPostRequest = {",
									"  url: 'http://' + pm.collectionVariables.get('uri') + '/products',",
									"  method: 'POST',",
									"  header: {",
									"      'Content-Type': 'application/json',",
									"      'Authorization': 'Bearer ' + pm.environment.get('currentAccessToken')",
									"  },",
									"  body: {",
									"    mode: 'application/json',",
									"    raw: JSON.stringify(",
									"        {",
									"            title: \"TestProdu21ct\",",
									"            type: 0,",
									"            description: \"This is a test product\",",
									"            location: \"Bern\",",
									"            sellOrLend: 0,",
									"            price: 120,",
									"            priceKind: 0,",
									"            status: 0,",
									"            deliverable: 1,",
									"            approved: 0,",
									"            userId: 2",
									"        })",
									"  }",
									"};",
									"",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"    console.log(err ? err : res.json());",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "89bfb01e-2a23-4ddc-a3a0-2e95f7d0de86",
								"exec": [
									"if (pm.environment.get('userId') == 1 ) {",
									"    pm.test(\"Admin is able to delete other users products\", () => {",
									"        pm.response.to.have.status(200);",
									"    })",
									"} else if (pm.environment.get('userId') == 2 ) {",
									"    pm.test(\"User must not be able to delete other users products\", () => {",
									"        pm.response.to.have.status(500);",
									"    })",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{uri}}/products/{{productId2}}",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"products",
								"{{productId2}}"
							]
						},
						"description": "delete a product"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "User Tests",
			"item": [
				{
					"name": "get user information",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1ead7c54-f77b-4b60-aed4-aa8d535db733",
								"exec": [
									"pm.test(\"Every user should be able to get his account information\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"if (pm.environment.get('userId') == 1 ) {",
									"    pm.test(\"Verifying the response of admin account information\", () => {",
									"        const responseJson = pm.response.json();",
									"        pm.response.to.have.status(200);",
									"        pm.expect(responseJson.userName).to.eql('admin');",
									"        pm.expect(responseJson.email).to.eql('admin@example.com');",
									"        pm.expect(responseJson.firstName).to.eql('Admin');",
									"        pm.expect(responseJson.lastName).to.eql('istrator');",
									"        pm.expect(responseJson.isAdmin).to.eql(1);",
									"        pm.expect(responseJson.userId).to.eql(1);",
									"    })",
									"} else if (pm.environment.get('userId') == 2 ) {",
									"    pm.test(\"Verifying the response of user account information\", () => {",
									"        const responseJson = pm.response.json();",
									"        pm.response.to.have.status(200);",
									"        pm.expect(responseJson.userName).to.eql('user');",
									"        pm.expect(responseJson.email).to.eql('user@example.com');",
									"        pm.expect(responseJson.firstName).to.eql('Testing');",
									"        pm.expect(responseJson.lastName).to.eql('user');",
									"        pm.expect(responseJson.isAdmin).to.eql(0);",
									"        pm.expect(responseJson.userId).to.eql(2);",
									"    })",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{uri}}/user/",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"user",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "get all users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2503a7a1-0da1-4dbe-b09f-e5839f246760",
								"exec": [
									"if (pm.environment.get('userId') == 1 ) {",
									"    pm.test(\"Admin is able to get all the user information\", () => {",
									"        pm.response.to.have.status(200);",
									"    })",
									"} else if (pm.environment.get('userId') == 2 ) {",
									"    pm.test(\"User must not be able to get all users of system\", () => {",
									"        pm.response.to.have.status(500);",
									"    })",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{uri}}/user/all",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"user",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "update User info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "21e07cf2-cfae-43f8-a1f3-fbf60e40d06f",
								"exec": [
									"pm.test(\"All users should be able to update their account information\", () => {",
									"    pm.response.to.have.status(200);",
									"",
									"})",
									"pm.test(\"Verify the updated attributes\", () => {",
									"    pm.response.to.have.status(200);",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.lastName).to.eql('updated lastName');",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"lastName\": \"updated lastName\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{uri}}/user/update",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"user",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "user delete",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e7cd471f-ebdb-400e-a988-41067f7bfc78",
								"exec": [
									"const echoPostRequest = {",
									"  url: 'http://' + pm.collectionVariables.get('uri') + '/user/register',",
									"  method: 'POST',",
									"  header: 'Content-Type:application/json',",
									"  body: {",
									"    mode: 'application/json',",
									"    raw: JSON.stringify(",
									"        {",
									"            userName: \"testi2\",",
									"            password: \"notSecure12\",",
									"            email: \"testi2@example.com\",",
									"            lastName: \"ng\",",
									"            firstName: \"Testi\",",
									"            isAdmin: 1",
									"        })",
									"  }",
									"};",
									"",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"    console.log(err ? err : res.json());",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8b600992-910d-4a99-b6b6-e3a2c01ac08f",
								"exec": [
									"if (pm.environment.get('userId') == 1 ) {",
									"    pm.test(\"Admin is able to get delete User with userId: \" + pm.environment.get('deleteUserId'), () => {",
									"        pm.response.to.have.status(200);",
									"    })",
									"} else if (pm.environment.get('userId') == 2 ) {",
									"    pm.test(\"User is able to delete own account\", () => {",
									"        pm.response.to.have.status(200);",
									"    })",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{uri}}/user/{{deleteUserId}}",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"user",
								"{{deleteUserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "user delete 2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "11bdca76-286d-4734-8902-3a003ebb3c21",
								"exec": [
									"const echoPostRequest = {",
									"  url: 'http://' + pm.collectionVariables.get('uri') + '/user/register',",
									"  method: 'POST',",
									"  header: 'Content-Type:application/json',",
									"  body: {",
									"    mode: 'application/json',",
									"    raw: JSON.stringify(",
									"        {",
									"            userName: \"testi3\",",
									"            password: \"notSecure12\",",
									"            email: \"testi3@example.com\",",
									"            lastName: \"ng\",",
									"            firstName: \"Testi\",",
									"            isAdmin: 1",
									"        })",
									"  }",
									"};",
									"",
									"const echoPostRequest2 = {",
									"  url: 'http://' + pm.collectionVariables.get('uri') + '/user/register',",
									"  method: 'POST',",
									"  header: 'Content-Type:application/json',",
									"  body: {",
									"    mode: 'application/json',",
									"    raw: JSON.stringify(",
									"        {",
									"            userName: \"testi4\",",
									"            password: \"notSecure12\",",
									"            email: \"testi4@example.com\",",
									"            lastName: \"ng\",",
									"            firstName: \"Testi\",",
									"            isAdmin: 1",
									"        })",
									"  }",
									"};",
									"",
									"const echoPostRequest3 = {",
									"  url: 'http://' + pm.collectionVariables.get('uri') + '/user/register',",
									"  method: 'POST',",
									"  header: 'Content-Type:application/json',",
									"  body: {",
									"    mode: 'application/json',",
									"    raw: JSON.stringify(",
									"        {",
									"            userName: \"testi5\",",
									"            password: \"notSecure12\",",
									"            email: \"testi5@example.com\",",
									"            lastName: \"ng\",",
									"            firstName: \"Testi\",",
									"            isAdmin: 1",
									"        })",
									"  }",
									"};",
									"",
									"pm.sendRequest(echoPostRequest3, function (err, res) {",
									"    console.log(err ? err : res.json());",
									"});",
									"",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"    console.log(err ? err : res.json());",
									"});",
									"",
									"pm.sendRequest(echoPostRequest2, function (err, res) {",
									"    console.log(err ? err : res.json());",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d84fba3f-c32b-4fdb-9b26-1a1404ea19f1",
								"exec": [
									"if (pm.environment.get('userId') == 1 ) {",
									"    pm.test(\"Admin is able to get delete User with userId: \" + pm.environment.get('deleteUserId2'), () => {",
									"        pm.response.to.have.status(200);",
									"    })",
									"} else if (pm.environment.get('userId') == 2 ) {",
									"    pm.test(\"User must not be able to delete other account\", () => {",
									"        pm.response.to.have.status(403);",
									"    })",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{uri}}/user/{{deleteUserId2}}",
							"protocol": "http",
							"host": [
								"{{uri}}"
							],
							"path": [
								"user",
								"{{deleteUserId2}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{currentAccessToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "23d02fa5-ea3f-4e4e-b960-403f69fc79ca",
				"type": "text/javascript",
				"exec": [
					"const echoPostRequest = {",
					"  url: 'http://' + pm.collectionVariables.get('uri') + '/user/login',",
					"  method: 'POST',",
					"  header: 'Content-Type:application/json',",
					"  body: {",
					"    mode: 'application/json',",
					"    raw: JSON.stringify(",
					"        {",
					"        \tuserNameOrEmail: pm.environment.get('username'),",
					"        \tpassword: pm.environment.get('password')",
					"        })",
					"  }",
					"};",
					"",
					"pm.sendRequest(echoPostRequest, function (err, res) {",
					"    console.log(err ? err : res.json());",
					"    if (err === null) {",
					"        console.log('Saving the token and expiry date')",
					"        var responseJson = res.json();",
					"        pm.environment.set('currentAccessToken', responseJson.token)",
					"    }",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "514bc725-2f4a-441d-966a-2113e72463f5",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "550648f1-2c33-4f63-b4c3-5106dae46140",
			"key": "currentAccessToken",
			"value": ""
		},
		{
			"id": "f56461aa-10fa-49e5-904d-852af87e0a2c",
			"key": "uri",
			"value": "localhost:3000"
		}
	],
	"protocolProfileBehavior": {}
}